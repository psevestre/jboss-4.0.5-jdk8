// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package org.jboss.test.webservice.jbws718;


import java.util.Map;
import java.util.HashMap;

public class SensitivityEnum {
    private java.lang.String value;
    private static java.util.Map valueMap = new HashMap();
    public static final java.lang.String _TrueString = "True";
    public static final java.lang.String _FalseString = "False";
    public static final java.lang.String _AutoString = "Auto";
    
    public static final java.lang.String _True = new java.lang.String(_TrueString);
    public static final java.lang.String _False = new java.lang.String(_FalseString);
    public static final java.lang.String _Auto = new java.lang.String(_AutoString);
    
    public static final SensitivityEnum True = new SensitivityEnum(_True);
    public static final SensitivityEnum False = new SensitivityEnum(_False);
    public static final SensitivityEnum Auto = new SensitivityEnum(_Auto);
    
    protected SensitivityEnum(java.lang.String value) {
        this.value = value;
        valueMap.put(this.toString(), this);
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static SensitivityEnum fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (True.value.equals(value)) {
            return True;
        } else if (False.value.equals(value)) {
            return False;
        } else if (Auto.value.equals(value)) {
            return Auto;
        }
        throw new java.lang.IllegalArgumentException();
    }
    
    public static SensitivityEnum fromString(java.lang.String value)
        throws java.lang.IllegalStateException {
        SensitivityEnum ret = (SensitivityEnum)valueMap.get(value);
        if (ret != null) {
            return ret;
        }
        if (value.equals(_TrueString)) {
            return True;
        } else if (value.equals(_FalseString)) {
            return False;
        } else if (value.equals(_AutoString)) {
            return Auto;
        }
        throw new IllegalArgumentException();
    }
    
    public java.lang.String toString() {
        return value.toString();
    }
    
    private java.lang.Object readResolve()
        throws java.io.ObjectStreamException {
        return fromValue(getValue());
    }
    
    public boolean equals(java.lang.Object obj) {
        if (!(obj instanceof SensitivityEnum)) {
            return false;
        }
        return ((SensitivityEnum)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
