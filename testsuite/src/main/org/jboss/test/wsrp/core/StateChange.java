// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package org.jboss.test.wsrp.core;


import java.util.HashMap;
import java.io.Serializable;

public class StateChange implements Serializable
{
   /** The serialVersionUID */
   private static final long serialVersionUID = 6137129200281947012L;
   private java.lang.String value;
   private static java.util.Map valueMap = new HashMap();
   public static final java.lang.String _readWriteString = "readWrite";
   public static final java.lang.String _cloneBeforeWriteString = "cloneBeforeWrite";
   public static final java.lang.String _readOnlyString = "readOnly";

   public static final java.lang.String _readWrite = new java.lang.String(_readWriteString);
   public static final java.lang.String _cloneBeforeWrite = new java.lang.String(_cloneBeforeWriteString);
   public static final java.lang.String _readOnly = new java.lang.String(_readOnlyString);

   public static final StateChange readWrite = new StateChange(_readWrite);
   public static final StateChange cloneBeforeWrite = new StateChange(_cloneBeforeWrite);
   public static final StateChange readOnly = new StateChange(_readOnly);

   protected StateChange(java.lang.String value)
   {
      this.value = value;
      valueMap.put(this.toString(), this);
   }

   public java.lang.String getValue()
   {
      return value;
   }

   public static StateChange fromValue(java.lang.String value)
      throws java.lang.IllegalStateException
   {
      if (readWrite.value.equals(value))
      {
         return readWrite;
      }
      else if (cloneBeforeWrite.value.equals(value))
      {
         return cloneBeforeWrite;
      }
      else if (readOnly.value.equals(value))
      {
         return readOnly;
      }
      throw new java.lang.IllegalArgumentException();
   }

   public static StateChange fromString(java.lang.String value)
      throws java.lang.IllegalStateException
   {
      StateChange ret = (StateChange)valueMap.get(value);
      if (ret != null)
      {
         return ret;
      }
      if (value.equals(_readWriteString))
      {
         return readWrite;
      }
      else if (value.equals(_cloneBeforeWriteString))
      {
         return cloneBeforeWrite;
      }
      else if (value.equals(_readOnlyString))
      {
         return readOnly;
      }
      throw new IllegalArgumentException();
   }

   public java.lang.String toString()
   {
      return value.toString();
   }

   private java.lang.Object readResolve()
      throws java.io.ObjectStreamException
   {
      return fromValue(getValue());
   }

   public boolean equals(java.lang.Object obj)
   {
      if (!(obj instanceof StateChange))
      {
         return false;
      }
      return ((StateChange)obj).value.equals(value);
   }

   public int hashCode()
   {
      return value.hashCode();
   }
}
