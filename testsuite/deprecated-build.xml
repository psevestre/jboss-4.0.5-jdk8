<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
   <!ENTITY libraries SYSTEM "../tools/etc/buildmagic/libraries.ent">
   <!ENTITY modules SYSTEM "../tools/etc/buildmagic/modules.ent">
   <!ENTITY mqstress SYSTEM "mqstress.xml">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: deprecated-build.xml 33259 2005-07-07 05:20:49Z telrod $ -->

<project default="main" name="JBoss/Testsuite">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" depends="_buildmagic:init">
    <tstamp>
      <format property="TIMENOW" pattern="yyyy-MM-dd.HH-mm" timezone="GMT"/>
    </tstamp>
    <echo message="${TIMENOW}" file="run.tstamp"/>
    <echo message="Set timestamp to: ${TIMENOW}"/>
  </target>


  <property name="results_web" value="http://jboss.sourceforge.net//junit-results/32"/>

  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">
    <!-- Give user a chance to override without editing this file
       (and without typing -D each time they run it) -->
    <property file=".ant.properties"/>

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="testsuite"/>
    <property name="module.Name" value="JBoss Testsuite"/>
    <property name="module.version" value="DEV"/>

    <!-- ============================= -->
    <!-- Folders excluded from compile -->
    <!-- ============================= -->
    <property name="javac.excludes">org/jboss/test/media/**</property>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    &libraries;
    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="apache.avalon.classpath"/>
      <path refid="apache.commons.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="apache.xerces.classpath"/>
      <path refid="dom4j.dom4j.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="ibm.wsdl4j.classpath"/>
      <path refid="jacorb.jacorb.classpath"/>
      <path refid="jgroups.jgroups.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="junitejb.junitejb.classpath"/>
      <path refid="javassist.classpath"/>
      <path refid="sun.javamail.classpath"/>
      <path refid="sun.servlet.classpath"/>
      <path refid="trove.classpath"/>
      <path refid="jboss.remoting.classpath"/>

      <!-- needed for JBossMQ selector tests -->
      <path refid="gnu.regexp.classpath"/>

      <!-- needed for proxy tests -->
      <path refid="apache.bcel.classpath"/>
      <!-- needed for security login module tests -->
      <path refid="hsqldb.hsqldb.classpath"/>

      <!-- Need hibernate jar for hibernate-based tests -->
      <path refid="hibernate2.classpath"/>
      <path refid="odmg.classpath"/>
      <path refid="cglib.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->
    &modules;
    <!-- InternalServer -->
    <!-- This could be a mistake.  Perhaps, though, it would be a good idea to separate
    tests that need internal jboss classes from those that don't.  When I put it in, only
    the jca XATxConnectionManagerUnitTestCase needed an internal class (the tx manager)-->
    <property name="jboss.internal-server.root" value="${project.root}/server/output"/>
    <property name="jboss.internal-server.lib" value="${jboss.internal-server.root}/lib"/>
    <path id="jboss.internal-server.classpath">
      <pathelement path="${jboss.server.lib}/jboss.jar"/>
      <pathelement path="${jboss.server.lib}/jboss-system.jar"/>
    </path>

    <!-- The combined dependant module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.aspects.classpath"/>
      <path refid="jboss.cache.classpath"/>
      <path refid="jboss.cluster.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.hibernate.classpath"/>
      <path refid="jboss.iiop.classpath"/>
      <path refid="jboss.internal-server.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.jaxrpc.classpath"/>
      <path refid="jboss.jbossnet.classpath"/>
      <path refid="jboss.jca.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.management.classpath"/>
      <path refid="jboss.media.classpath"/>
      <path refid="jboss.messaging.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.security.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.transaction.classpath"/>
      <path refid="jboss.varia.classpath"/>
      <path refid="jboss.webservice.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.docs" value="${module.source}/docs"/>
    <property name="source.resources" value="${module.source}/resources"/>
    <property name="source.stylesheets" value="${module.source}/stylesheets"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.docs" value="${module.output}/docs"/>
    <property name="build.resources" value="${module.output}/resources"/>
    <property name="build.stylesheets" value="${module.output}/stylesheets"/>
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.testlog" value="${module.output}/log"/>

    <!--xdoclet output directories-->
    <property name="build.gen-src" value="${module.output}/gen-src/"/>
    <!-- put ejb-jar.xml and other resources into build.resources-->

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- Classpath to build and run the tests -->
    <path id="tests.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <pathelement path="${project.tools}/lib/ant.jar"/>
      <pathelement path="${project.tools}/lib/ant-junit.jar"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="tests.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="180000"/> <!-- 3 minutes -->
    <property name="jbosstest.iterationcount" value="10"/>
    <property name="jbosstest.threadcount" value="5"/>
    <property name="jbosstest.beancount" value="5"/>
    <property name="jbosstest.nodeploy" value="false"/>
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>
    <!-- Override JUnit Marathon defaults -->
    <property name="marathon.timeout" value="3900000"/> <!-- 65 minutes -->
    <property name="marathon.duration" value="3600000"/> <!-- 60 minutes -->
    <property name="marathon.threadcount" value="100"/>
    <echo><![CDATA[
junit.timeout:              ${junit.timeout}
jbosstest.iterationcount:   ${jbosstest.iterationcount}
jbosstest.threadcount:      ${jbosstest.threadcount}
jbosstest.beancount:        ${jbosstest.beancount}
marathon.timeout:           ${marathon.timeout}
marathon.duration:          ${marathon.duration}
marathon.threadcount:       ${marathon.threadcount}
      ]]></echo>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="tests.classpath"/>
      <fileset dir="${project.thirdparty}/xdoclet-xdoclet/lib">
        <include name="**/*.jar"/>
      </fileset>
<!--
      <fileset dir="${project.root}/jboss.net/output/lib">
        <include name="xdoclet-*.jar"/>
      </fileset>
-->
    </path>
    <property name="xdoclet.task.classpath"
      refid="xdoclet.task.classpath"/>

    <property name="xdoclet.mergedir" value="${project.tools}/etc/xdoclet/templates}"/>

    <!-- Setup the version 1 classes so the tests compile -->
    <mkdir dir="${build.gen-src}/org/jboss/test/cts/interfaces"/>
    <copy tofile="${build.gen-src}/org/jboss/test/cts/interfaces/CtsCmp2Local.java"
      file="${source.java}/org/jboss/test/cts/interfaces/CtsCmp2Local_V1.txt"
      overwrite="false"/>
    <mkdir dir="${build.gen-src}/org/jboss/test/classloader/scoping/singleton"/>
    <copy tofile="${build.gen-src}/org/jboss/test/classloader/scoping/singleton/MySingleton.java"
      file="${source.java}/org/jboss/test/classloader/scoping/singleton/MySingleton_V1.txt"
      overwrite="false"/>

  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!--
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile"
    depends="compile-classes, compile-xmbean-dds,  compile-etc, compile-stylesheets, compile-resources"
    description="Compile all source files."/>

  <!-- Compile EJB beans with XDoclet -->
  <target name="compile-bean-sources" depends="init" unless="noxdoclet">
    <taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask" classpathref="xdoclet.task.classpath"/>

    <mkdir dir="${build.gen-src}"/>

    <!--ejbconf-->
    <mkdir dir="${build.resources}/ejb-conf/readonly/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/ejb-conf/readonly">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/ejbconf/beans/**/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/ejbconf/readonly/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/ejbconf/readonly/META-INF"
        mergedir="${source.resources}/ejbconf/readonly/"
        Datasource="java:/DefaultDS"
        Typemapping="Hypersonic SQL"
        />
    </ejbdoclet>

    <!--eardeployment, SessionA-->
    <mkdir dir="${build.resources}/jmx/eardeployment/a/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/eardeployment/a">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/eardeployment/a/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jmx/eardeployment/a/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jmx/eardeployment/a/META-INF"
        mergedir="${source.resources}/jmx/eardeployment/a/"/>
    </ejbdoclet>

    <!--eardeployment, SessionB-->
    <mkdir dir="${build.resources}/jmx/eardeployment/b/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/eardeployment/b">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/eardeployment/b/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jmx/eardeployment/b/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jmx/eardeployment/b/META-INF"
        mergedir="${source.resources}/jmx/eardeployment/b/"/>
    </ejbdoclet>

    <!-- eardepends Dependent[A/B] -->
    <mkdir dir="${build.resources}/jmx/eardepends/depend/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/eardepends/dependent/META-INF">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/eardepends/dependent/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jmx/eardepends/dependent/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.2"
        destdir="${build.resources}/jmx/eardepends/dependent/META-INF"
        mergedir="${source.resources}/jmx/eardepends/dependent/META-INF"/>
    </ejbdoclet>

    <!-- eardepends Independent -->
    <mkdir dir="${build.resources}/jmx/eardepends/independent/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/eardepends/independent/META-INF">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/eardepends/independent/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jmx/eardepends/independent/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.2"
        destdir="${build.resources}/jmx/eardepends/independent/META-INF"
        mergedir="${source.resources}/jmx/eardepends/independent/META-INF"/>
    </ejbdoclet>

    <!-- cmr written after post create -->
    <mkdir dir="${build.resources}/cmp2/cmr/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/cmp2/cmr">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/cmr/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/cmp2/cmr/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/cmp2/cmr/META-INF"
        mergedir="${source.resources}/cmp2/cmr/"
        Datasource="java:/DefaultDS"
        Typemapping="Hypersonic SQL"/>
    </ejbdoclet>

    <!-- cmp2 passivation integrity test -->
    <mkdir dir="${build.resources}/cmp2/passivation/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/cmp2/passivation">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/passivation/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <deploymentdescriptor
        destdir="${build.resources}/cmp2/passivation/META-INF"
        validatexml="${validatexml}"/>
      <jboss
        version="3.2"
        xmlencoding="UTF-8"
        destdir="${build.resources}/cmp2/passivation/META-INF"
        validatexml="${validatexml}"
        mergedir="${source.resources}/cmp2/passivation"/>
    </ejbdoclet>

    <!-- optimistic lock test -->
    <mkdir dir="${build.resources}/cmp2/optimisticlock/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/cmp2/optimisticlock">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/optimisticlock/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
    </ejbdoclet>

    <!-- foreign key mapping tests -->
    <mkdir dir="${build.resources}/cmp2/fkmapping/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.etc}/cmp2/fkmapping">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/fkmapping/ejb/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <entitypk/>
      <utilobject cacheHomes="true" includeGUID="false"/>
      <entitycmp/>
      <session/>
      <deploymentdescriptor
        destdir="${build.resources}/cmp2/fkmapping/META-INF"
        validatexml="${validatexml}"/>
      <jboss
        version="3.2"
        xmlencoding="UTF-8"
        destdir="${build.resources}/cmp2/fkmapping/META-INF"
        validatexml="${validatexml}"/>
    </ejbdoclet>

    <!-- foreign key mapping stack overflow error tests -->
    <mkdir dir="${build.resources}/cmp2/fkstackoverflow/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.etc}/cmp2/fkstackoverflow">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/fkstackoverflow/ejb/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <entitypk/>
      <utilobject cacheHomes="true" includeGUID="false"/>
      <entitycmp/>
      <session/>
      <deploymentdescriptor
        destdir="${build.resources}/cmp2/fkstackoverflow/META-INF"
        validatexml="${validatexml}"/>
      <jboss
        version="3.2"
        xmlencoding="UTF-8"
        destdir="${build.resources}/cmp2/fkstackoverflow/META-INF"
        validatexml="${validatexml}"/>
    </ejbdoclet>

    <!-- dbindex and post-table-create tests -->
    <mkdir dir="${build.resources}/cmp2/idxandusersql/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.etc}/cmp2/idxandusersql">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/idxandusersql/ejb/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <entitypk/>
      <utilobject cacheHomes="true" includeGUID="false"/>
      <entitycmp/>
      <session/>
      <!--  Don't build the DD, haswe have our own one
            prepared. Can change in the future if the
            jboss-xdoclet supports dbindex etc.
      <deploymentdescriptor
         destdir="${build.resources}/cmp2/idxandusersql/META-INF"
         validatexml="${validatexml}"/>
      <jboss
         version="3.2"
         xmlencoding="UTF-8"
         destdir="${build.resources}/cmp2/idxandusersql/META-INF"
         validatexml="${validatexml}"/>
      -->
    </ejbdoclet>

    <!-- ejbselect tests -->
    <mkdir dir="${build.resources}/cmp2/ejbselect/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.etc}/cmp2/ejbselect">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/ejbselect/*Bean.java"/>
      </fileset>
      <localinterface/>
      <localhomeinterface/>
      <entitypk/>
      <utilobject cacheHomes="true" includeGUID="false"/>
      <entitycmp/>
      <session/>
      <deploymentdescriptor
        destdir="${build.resources}/cmp2/ejbselect/META-INF"
        validatexml="${validatexml}"/>
      <jboss
        version="3.2"
        xmlencoding="UTF-8"
        destdir="${build.resources}/cmp2/ejbselect/META-INF"
        validatexml="${validatexml}"/>
    </ejbdoclet>

    <!-- cmp2 relationship stress tests -->
    <mkdir dir="${build.resources}/cmp2/cmrstress/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/cmp2/cmrstress">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/cmrstress/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <utilobject cacheHomes="true" includeGUID="false" kind="physical"/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/cmp2/cmrstress/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/cmp2/cmrstress/META-INF"
        datasource="java:/DefaultDS"
        datasourceMapping="Hypersonic SQL"
        />
    </ejbdoclet>

    <!-- cmp2 enum tests -->
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/cmp2/enum">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cmp2/enum/ejb/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <utilobject cacheHomes="true" includeGUID="false" kind="physical"/>
    </ejbdoclet>

    <!--undeploy of broken packages-->
    <mkdir dir="${build.resources}/jmx/undeploy/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jmx/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/ejb/Entity*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jmx/undeploy/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jmx/undeploy/META-INF"
        mergedir="${source.resources}/jmx/undeploy/"
        Datasource="java:/DefaultDS"
        Typemapping="Hypersonic SQL"
        />
    </ejbdoclet>

    <!--jca framework tests-->
    <mkdir dir="${build.resources}/jca/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jca/ejb/*Bean.java"/>
        <exclude name="org/jboss/test/jca/ejb/Unshareable*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jca/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jca/META-INF"
        mergedir="${source.resources}/jca/"/>
    </ejbdoclet>

    <mkdir dir="${build.resources}/jca/bank/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jca/bank/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jca/bank/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jca/bank/META-INF"
        mergedir="${source.resources}/jca/bank/"/>
    </ejbdoclet>

    <mkdir dir="${build.resources}/banknew/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/banknew/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <entitycmp cmpspec="2.x"/>
      <session/>
      <remoteinterface/>
      <!--      <localinterface/> -->
      <homeinterface/>
      <!--      <localhomeinterface/> -->
      <dataobject/>
      <entitypk/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/banknew/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/banknew/META-INF"
        mergedir="${source.resources}/banknew/"/>
    </ejbdoclet>

    <!-- Foe-Deployer: Simple Test -->
    <mkdir dir="${build.resources}/foedeployer/simple/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/foedeployer/ejb/simple/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/simple/META-INF"/>
      <weblogic version="6.1"
        xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/simple/META-INF"
        validatexml="true"
        createtables="True"
        datasource="java:/DefaultDS"
        mergedir="${source.resources}/foedeployer/"/>
      <!-- No JBoss DD generation here because that is what we can to use FoeDeployer for -->
    </ejbdoclet>

    <!-- Foe-Deployer: Message Test -->
    <mkdir dir="${build.resources}/foedeployer/message/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/foedeployer/ejb/message/*Bean.java"/>
      </fileset>

      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/message/META-INF"/>
      <weblogic version="6.1"
        xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/message/META-INF"
        validatexml="true"
        datasource="java:/DefaultDS"
        mergedir="${source.resources}/foedeployer/"/>
      <!-- No JBoss DD generation here because that is what we can to use FoeDeployer for -->
    </ejbdoclet>

    <!-- Foe-Deployer: O2MB Test -->
    <mkdir dir="${build.resources}/foedeployer/o2mb/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/foedeployer/ejb/o2mb/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/o2mb/META-INF"/>
      <weblogic version="6.1"
        xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/o2mb/META-INF"
        validatexml="true"
        createtables="True"
        datasource="java:/DefaultDS"
        mergedir="${source.resources}/foedeployer/"/>
      <!-- No JBoss DD generation here because that is what we can to use FoeDeployer for -->
    </ejbdoclet>

    <!-- Foe-Deployer: M2MB Test -->
    <mkdir dir="${build.resources}/foedeployer/m2mb/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/foedeployer/ejb/m2mb/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/m2mb/META-INF"/>
      <weblogic version="6.1"
        xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/m2mb/META-INF"
        validatexml="true"
        createtables="True"
        datasource="java:/DefaultDS"
        mergedir="${source.resources}/foedeployer/"/>
      <!-- No JBoss DD generation here because that is what we can to use FoeDeployer for -->
    </ejbdoclet>

    <!-- Foe-Deployer: QL Test -->
    <mkdir dir="${build.resources}/foedeployer/ql/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <!--mergedir="${source.resources}/jca/ejb"-->
      <fileset dir="${source.java}">
        <include name="org/jboss/test/foedeployer/ejb/ql/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/ql/META-INF"/>
      <weblogic version="6.1"
        xmlencoding="UTF-8"
        destdir="${build.resources}/foedeployer/ql/META-INF"
        validatexml="true"
        createtables="True"
        datasource="java:/DefaultDS"
        mergedir="${source.resources}/foedeployer/"/>
      <!-- No JBoss DD generation here because that is what we can to use FoeDeployer for -->
    </ejbdoclet>

    <!-- cpmanifest test -->
    <mkdir dir="${build.resources}/jmx/loading/cpmanifest/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/loading/ConcreteBean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <homeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jmx/loading/cpmanifest/META-INF"/>
    </ejbdoclet>

    <!-- EJB Timer Service Test Beans -->
    <mkdir dir="${build.resources}/timer/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/timer/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/timer/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/timer/META-INF"
        mergedir="${source.resources}/timer/"/>
    </ejbdoclet>

    <!-- EJB Tx Timer Service Test Beans -->
    <mkdir dir="${build.resources}/txtimer/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/txtimer/ejb/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/txtimer/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/txtimer/META-INF"
        mergedir="${source.resources}/txtimer/"/>
    </ejbdoclet>

    <!-- entity test -->
    <mkdir dir="${build.resources}/entity/entity/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/entity/entity">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/entity/beans/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="beans" substituteWith="interfaces"/>
      <valueobject/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <entitycmp/>
      <utilobject kind="physical"/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/entity/entity/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        datasource="java:/DefaultDS"
        typemapping="Hypersonic SQL"
        destdir="${build.resources}/entity/entity/META-INF"/>
    </ejbdoclet>

    <!-- JBoss.NET services generation -->

    <java dir="${build.gen-src}" fork="yes" failOnError="true" className="org.jboss.axis.wsdl.WSDL2Java">
       <arg value="-Nhttp://localhost/HelloBean=org.jboss.test.jbossnet.admindevel"/>
       <arg value="-Nhttp://localhost:8080/jboss-net/services/Hello=org.jboss.test.jbossnet.admindevel"/>
       <arg value="${source.resources}/jbossnet/admindevel/hello.wsdl"/>
       <classpath refid="thirdparty.classpath"/>
    </java>
    <!-- These are in CVS and contain JBoss.NET XDoclet directives -->
    <delete dir="${build.gen-src}/org/jboss/test/jbossnet/admindevel">
      <include name="HelloObj.java"/>
      <include name="HelloReplyObj.java"/>
    </delete>

    <!-- call wsdl4j emitter for AddressBook interfaces and stubs -->
    <java dir="${build.gen-src}" fork="yes" failOnError="true" className="org.jboss.axis.wsdl.WSDL2Java">
      <arg value="-s"/>
      <arg value="-d"/>
      <arg value="Session"/>
      <arg value="-Nhttp://test.jboss.org/samples/AddressBook=org.jboss.test.jbossnet.wsr"/>
      <arg value="${source.resources}/jbossnet/wsr/wsr/META-INF/AddressBook.wsdl"/>
      <classpath refid="thirdparty.classpath"/>
    </java>

    <!-- Delete the service impl skeleton as we have an impl already -->
    <delete file="${build.gen-src}/org/jboss/test/jbossnet/wsr/AddressBookSOAPBindingImpl.java"/>

    <!-- call wsdl4j emitter for Bablefish stubs -->
    <java dir="${build.gen-src}" fork="yes" failOnError="true" className="org.jboss.axis.wsdl.WSDL2Java">
      <arg value="-d"/>
      <arg value="Session"/>
      <arg value="-Nhttp://www.xmethods.net/sd/BabelFishService.wsdl=org.jboss.test.jbossnet.external.babelfish"/>
      <arg value="${source.resources}/jbossnet/external/wsr/META-INF/babelfish.wsdl"/>
      <classpath refid="thirdparty.classpath"/>
    </java>

    <!-- call wsdl4j emitter for Google stubs -->
    <java dir="${build.gen-src}" fork="yes" failOnError="true" className="org.jboss.axis.wsdl.WSDL2Java">
      <arg value="-d"/>
      <arg value="Session"/>
      <arg value="-Nurn:GoogleSearch=org.jboss.test.jbossnet.external.google"/>
      <arg value="${source.resources}/jbossnet/external/wsr/META-INF/google.wsdl"/>
      <classpath refid="thirdparty.classpath"/>
    </java>

    <!-- these taskdefs allow to call jboss.net specific xdoclet functionality -->
    <taskdef name="jbossnet-ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask">
      <classpath refid="xdoclet.task.classpath"/>
      <classpath refid="jboss.jbossnet.classpath"/>
    </taskdef>
    <taskdef name="jbossnet-jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask">
      <classpath refid="xdoclet.task.classpath"/>
      <classpath refid="jboss.jbossnet.classpath"/>
    </taskdef>

    <!-- generate admindevel meta-data and interfaces -->
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jbossnet/admindevel/*Bean.java"/>
        <include name="org/jboss/test/jbossnet/admindevel/*Obj.java"/>
      </fileset>
      <remoteinterface pattern="{0}Remote"/>
      <homeinterface />
      <deploymentdescriptor destdir="${build.resources}/jbossnet/admindevel/ejb/META-INF"/>
      <jbossnet webDeploymentName="HelloBean"
        prefix="hello"
        destdir="${build.resources}/jbossnet/admindevel/wsr/META-INF"
        targetNameSpace="http://localhost/HelloBean"/>
    </ejbdoclet>

    <!-- generate ejbsimple meta-data and interfaces -->
    <jbossnet-ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jbossnet/ejbsimple/server/Hello*Bean.java"/>
        <include name="org/jboss/test/jbossnet/ejbsimple/HelloData.java"/>
      </fileset>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jbossnet/ejbsimple/ejb/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jbossnet/ejbsimple/ejb/META-INF"/>
      <jbossnet webDeploymentName="EjbSimple"
        prefix="ejbsimple"
        destdir="${build.resources}/jbossnet/ejbsimple/wsr/META-INF"
        targetNameSpace="http://test.jboss.org/ejbsimple"/>
    </jbossnet-ejbdoclet>

    <!-- generate jmx meta-data and interfaces -->
    <jbossnet-jmxdoclet destdir="${build.gen-src}"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jbossnet/jmx/server/JMXTest.java"/>
        <include name="org/jboss/test/jbossnet/jmx/server/JMXDynamicTest.java"/>
      </fileset>
      <mbeaninterface/>
      <jbossnet webDeploymentName="JMXTest"
        prefix="jmx"
        destdir="${build.resources}/jbossnet/jmx/wsr/META-INF"
        targetNameSpace="http://test.jboss.org/jmx"/>
    </jbossnet-jmxdoclet>

    <!-- generate state test meta-data -->
    <jbossnet-ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jbossnet/state/server/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jbossnet/state/ejb/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jbossnet/state/ejb/META-INF"/>
      <jbossnet webDeploymentName="State"
        prefix="state"
        destdir="${build.resources}/jbossnet/state/wsr/META-INF"
        targetNameSpace="http://test.jboss.org/state"/>
    </jbossnet-ejbdoclet>

    <!-- generate security test meta-data -->
    <jbossnet-ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jbossnet/security/server/*Bean.java"/>
      </fileset>
      <entitycmp cmpspec="2.x"/>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jbossnet/security/ejb/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        securitydomain="java:/jaas/other"
        destdir="${build.resources}/jbossnet/security/ejb/META-INF"/>
      <jbossnet webDeploymentName="Security"
        prefix="security"
        destdir="${build.resources}/jbossnet/security/wsr/META-INF"
        targetNameSpace="http://test.jboss.org/security"/>
    </jbossnet-ejbdoclet>

    <!-- generate external test meta-data  -->
    <jbossnet-ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jbossnet/external/server/*Bean.java"/>
      </fileset>
      <entitycmp cmpspec="2.x"/>
      <remoteinterface/>
      <homeinterface/>
      <localinterface/>
      <localhomeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/jbossnet/external/ejb/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/jbossnet/external/ejb/META-INF"/>
      <jbossnet webDeploymentName="External"
        prefix="external"
        mergedir="${source.resources}/jbossnet/external/wsr/META-INF"
        destdir="${build.resources}/jbossnet/external/wsr/META-INF"
        targetNameSpace="http://test.jboss.org/external"/>
    </jbossnet-ejbdoclet>

    <!-- aop test -->
    <mkdir dir="${build.resources}/aop/simpleejb/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/simpleejb/SimpleBean.java"/>
      </fileset>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/aop/simpleejb/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/aop/simpleejb/META-INF"/>
    </ejbdoclet>

    <!-- aop xdoclet test - ->
    <taskdef name="aopdoclet"
             classname="xdoclet.modules.jboss.aop.JBossAopTask"
             classpathref="tests.classpath"/>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/Advised">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/Advised.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/ClassMetaData">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/ClassMetaData.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/Intercepted">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/Intercepted.java"/>
        <include name="org/jboss/test/aop/xdoclet/BasicInterceptor.java"/>
        <include name="org/jboss/test/aop/xdoclet/XmlLoadingInterceptor.java"/>
        <include name="org/jboss/test/aop/xdoclet/XmlInterceptorFactory.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/NewIntercepted">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/NewIntercepted.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/Introduced">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/Introduced.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/NotAdvised">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/NotAdvised.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/Secured">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/Secured.java"/>
      </fileset>
      <configParam name="RunAs" value="Andy"/>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/Stack">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/Stack.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    <aopdoclet destdir="${build.resources}/aop/xdoclet/Transacted">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/aop/xdoclet/Transacted.java"/>
      </fileset>
      <jbossaop/>
    </aopdoclet>
    -->

    <!-- cache test -->
    <mkdir dir="${build.resources}/cache/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/cache/bean/*Bean.java"/>
      </fileset>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/cache/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/cache/META-INF"/>
    </ejbdoclet>

    <!-- webservice/marshalltest test -->
    <mkdir dir="${build.resources}/webservice/marshalltest/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/webservice/marshalltest/*BeanImpl.java"/>
      </fileset>
      <remoteinterface/>
      <homeinterface/>
    </ejbdoclet>

  </target>

  <target name="compile-mbean-sources" depends="init" unless="noxdoclet">
    <taskdef name="jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask" classpathref="xdoclet.task.classpath"/>

    <mkdir dir="${build.gen-src}"/>
    <jmxdoclet destdir="${build.gen-src}"
      force="true"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/deployer/*.java"/>
        <include name="org/jboss/test/jmx/invoker/*.java"/>
        <include name="org/jboss/test/jmx/mbean/*.java"/>
        <include name="org/jboss/test/jmx/missingclass/*.java"/>
      </fileset>
      <mbeaninterface mergedir="${project.tools}/etc/xdoclet/templates"/>
      <!--mbeaninterface mergedir="${xdoclet.mergedir}"/-->
    </jmxdoclet>
  </target>

  <target name="compile-xmbean-dds" depends="init" unless="noxdoclet">
    <taskdef name="jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask" classpathref="xdoclet.task.classpath"/>
    <echo message="xdoclet.mergedir: ${xdoclet.mergedir}"/>
    <mkdir dir="${build.resources}/jmx/xmbean"/>
    <jmxdoclet destdir="${build.resources}/jmx/xmbean"
      force="true"
      excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/jmx/xmbean/*.java"/>
      </fileset>
      <jbossxmbean/>
    </jmxdoclet>

  </target>

  <target name="compile-proxycompiler-bean-sources" depends="init" unless="noxdoclet">
    <taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask" classpathref="xdoclet.task.classpath"/>

    <mkdir dir="${build.gen-src}"/>

    <mkdir dir="${build.resources}/proxycompiler/META-INF"/>
    <ejbdoclet destdir="${build.gen-src}"
      ejbspec="2.0"
      excludedtags="@version,@author"
      mergedir="${source.resources}/proxycompiler">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/proxycompiler/beans/**/*Bean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface/>
      <localhomeinterface/>
      <!--session/-->
      <deploymentdescriptor xmlencoding="UTF-8"
        destdir="${build.resources}/proxycompiler/META-INF"/>
      <jboss xmlencoding="UTF-8"
        version="3.0"
        destdir="${build.resources}/proxycompiler/META-INF"
        mergedir="${source.resources}/proxycompiler"/>
    </ejbdoclet>

  </target>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="compile-bean-sources, compile-mbean-sources, compile-proxycompiler-bean-sources, compile-classes-only">
  </target>

  <target name="compile-classes-only" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
      optimize="${javac.optimize}"
      target="${javac.target}"
      debug="${javac.debug}"
      depend="${javac.depend}"
      verbose="${javac.verbose}"
      deprecation="${javac.deprecation}"
      includeAntRuntime="${javac.include.ant.runtime}"
      includeJavaRuntime="${javac.include.java.runtime}"
      failonerror="${javac.fail.onerror}">
      <src path="${source.java}"/>
      <src path="${build.gen-src}"/>
      <classpath refid="tests.classpath"/>
      <include name="${javac.includes}"/>
      <exclude name="${javac.excludes}"/>
    </javac>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="no">
      <fileset dir="${source.resources}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- we copy the standard client-config to the resources folder
    <copy todir="${build.resources}" filtering="no">
      <fileset dir="${jboss.jbossnet.etc}">
        <include name="**/client-config.xml"/>
      </fileset>
    </copy>
-->
  </target>

  <!-- Compile stylesheets files -->
  <target name="compile-stylesheets" depends="init">
    <mkdir dir="${build.stylesheets}"/>
    <copy todir="${build.stylesheets}" filtering="yes">
      <fileset dir="${source.stylesheets}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile etc files (manifests and such) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile wsdl files -->
  <target name="compile-wsdl" depends="init">

    <!-- Note, we use the latest axis tools -->
    <path id="java2wsdl.classpath">
      <path refid="apache.axis.classpath"/>
      <path refid="apache.commons.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="ibm.wsdl4j.classpath"/>
      <path refid="sun.jaf.classpath"/>
      <path refid="sun.javamail.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
    </path>

    <!-- jboss.net/ejbsimple -->
    <mkdir dir="${build.resources}/jbossnet/ejbsimple"/>
    <java classname="org.jboss.axis.wsdl.Java2WSDL" fork="yes">
      <classpath refid="java2wsdl.classpath"/>
      <classpath path="${build.classes}"/>
      <arg value="-lhttp://dummy-host:8080/dummy-path"/>
      <arg value="-o${build.resources}/jbossnet/ejbsimple/hello.wsdl"/>
      <arg value="-nhttp://ejbsimple.jbossnet.test.jboss.org"/>
      <arg value="-STestService"/>
      <arg value="-sTestPort"/>
      <arg value="-yRPC"/>
      <arg value="-uENCODED"/>
      <arg value="org.jboss.test.jbossnet.ejbsimple.HelloRemote"/>
    </java>

    <!-- webservice/marshalltest -->
    <mkdir dir="${build.resources}/webservice/marshalltest-rpcenc/META-INF/wsdl"/>
    <java classname="org.jboss.axis.wsdl.Java2WSDL" fork="yes">
      <classpath refid="java2wsdl.classpath"/>
      <classpath path="${build.classes}"/>
      <arg value="-lhttp://dummy-host:8080/dummy-path"/>
      <arg value="-o${build.resources}/webservice/marshalltest-rpcenc/META-INF/wsdl/rpc-encoded.wsdl"/>
      <arg value="-nhttp://marshalltest.webservice.test.jboss.org"/>
      <arg value="-SMarshallTestService"/>
      <arg value="-sMarshallTestPort"/>
      <arg value="-yRPC"/>
      <arg value="-uENCODED"/>
      <arg value="org.jboss.test.webservice.marshalltest.MarshallTestEndpoint"/>
    </java>
    <mkdir dir="${build.resources}/webservice/marshalltest-rpclit/META-INF/wsdl"/>
    <java classname="org.jboss.axis.wsdl.Java2WSDL" fork="yes">
      <classpath refid="java2wsdl.classpath"/>
      <classpath path="${build.classes}"/>
      <arg value="-lhttp://dummy-host:8080/dummy-path"/>
      <arg value="-o${build.resources}/webservice/marshalltest-rpclit/META-INF/wsdl/rpc-literal.wsdl"/>
      <arg value="-nhttp://marshalltest.webservice.test.jboss.org"/>
      <arg value="-SMarshallTestService"/>
      <arg value="-sMarshallTestPort"/>
      <arg value="-yRPC"/>
      <arg value="-uLITERAL"/>
      <arg value="org.jboss.test.webservice.marshalltest.MarshallTestEndpoint"/>
    </java>
    <mkdir dir="${build.resources}/webservice/marshalltest-doclit/META-INF/wsdl"/>
    <java classname="org.jboss.axis.wsdl.Java2WSDL" fork="yes">
      <classpath refid="java2wsdl.classpath"/>
      <classpath path="${build.classes}"/>
      <arg value="-lhttp://dummy-host:8080/dummy-path"/>
      <arg value="-o${build.resources}/webservice/marshalltest-doclit/META-INF/wsdl/doc-literal.wsdl"/>
      <arg value="-nhttp://marshalltest.webservice.test.jboss.org"/>
      <arg value="-SMarshallTestService"/>
      <arg value="-sMarshallTestPort"/>
      <arg value="-yDOCUMENT"/>
      <arg value="-uLITERAL"/>
      <arg value="org.jboss.test.webservice.marshalltest.MarshallTestEndpoint"/>
    </java>

    <!-- webservice/handlerflow -->
    <mkdir dir="${build.resources}/webservice/handlerflow/META-INF/wsdl"/>
    <java classname="org.jboss.axis.wsdl.Java2WSDL" fork="yes">
      <classpath refid="java2wsdl.classpath"/>
      <classpath path="${build.classes}"/>
      <arg value="-lhttp://localhost:8080/ws4eehandlerflow/HelloService"/>
      <arg value="-o${build.resources}/webservice/handlerflow/META-INF/wsdl/Hello.wsdl"/>
      <arg value="-nhttp://test.jboss.org/webservice/handlerflow"/>
      <arg value="-SHelloService"/>
      <arg value="-sHelloPort"/>
      <arg value="-yRPC"/>
      <arg value="-uENCODED"/>
      <arg value="org.jboss.test.webservice.handlerflow.HelloEndpoint"/>
    </java>
  </target>

  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!--
     | Build all jar files.
   -->

  <target name="jars" description="Builds all jar files."
    depends="compile,
      _jars-aop,
      _jars-bank,
      _jars-bank-new,
      _jars-bankiiop,
      _jars-bench,
      _jars-bmp,
      _jars-cache,
      _jars-classloader,
      _jars-cmp2,
      _jars-cts,
      _jars-client,
      _jars-dbtest,
      _jars-deadlock,
      _jars-ejbconf,
      _jars-entity,
      _jars-entityexc,
      _jars-excepiiop,
      _jars-exception,
      _jars-foedeployer,
      _jars-hello,
      _jars-helloiiop,
      _jars-hellojrmpiiop,
      _jars-hibernate,
      _jars-httpsessionreplication,
      _jars-idgen,
      _jars-iiop,
      _jars-invokers,
      _jars-isolation,
      _jars-jbossmq,
      _jars-jbossmx,
      _jars-jbossnet,
      _jars-jca,
      _jars-jmsra,
      _jars-jmx,
      _jars-jrmp,
      _jars-jsr77,
      _jars-load,
      _jars-lock,
      _jars-marathon,
      _jars-mdb,
      _jars-messagedriven,
      _jars-naming,
      _jars-perf,
      _jars-pooled,
      _jars-proxycompiler,
      _jars-readahead,
      _jars-retry,
      _jars-security,
      _jars-testbean,
      _jars-testbeancluster,
      _jars-threading,
      _jars-timer,
      _jars-tm,
      _jars-txiiop,
      _jars-txpropiiop,
      _jars-txtimer,
      _jars-util,
      _jars-web,
      _jars-webservice,
      _jars-xa">
  </target>

  <!--
     | These targets are meant to be invoked from the 'jars' target.  They
     | do not depend on 'compile' to avoid recursing over those tasks over
     | and over.
     |
     | If you really want to run these outside of 'jars', then besure that
     | the 'compile' targets has be run or you are bound to run into lots of
     | errors.
   -->

  <patternset id="common.test.client.classes">
    <include name="org/jboss/test/util/**"/>
  </patternset>

  <patternset id="jboss.test.util.ejb.set">
    <include name="org/jboss/test/util/ejb/**"/>
  </patternset>

   <!-- aop test -->
   <target name="_jars-aop">
      <mkdir dir="${build.lib}"/>
      <taskdef name="aopc" classname="org.jboss.aop.ant.AopC" classpathref="jboss.aop.classpath"/>
      <path id="aop.task.classpath">
         <path refid="javassist.classpath"/>
         <path refid="qdox.classpath"/>
         <path refid="trove.classpath"/>
         <path refid="jboss.aop.classpath"/>
         <path refid="jboss.common.classpath"/>
      </path>
      <taskdef name="annotationc" classname="org.jboss.aop.ant.AnnotationC" classpathref="jboss.aop.classpath"/>
      <annotationc compilerclasspathref="aop.task.classpath" bytecode="true">
         <classpath refid="thirdparty.classpath"/>
         <classpath path="${build.classes}"/>
         <src path="${source.java}"/>
         <include name="org/jboss/test/aop/bean/AnnotatedSecuredPOJO.java"/>
         <include name="org/jboss/test/aop/bean/AnnotatedTxPOJO.java"/>
         <include name="org/jboss/test/aop/bean/AnnotatedTxLockedPOJO.java"/>
      </annotationc>
      <!-- build aopest.jar -->
      <jar jarfile="${build.lib}/aoptest.jar"
         manifest="${build.etc}/manifest.mf">
         <fileset dir="${build.classes}">
            <patternset refid="common.test.client.classes"/>
            <include name="org/jboss/test/aop/test/**"/>
            <include name="org/somepackage/**"/>
         </fileset>
         <fileset dir="${build.resources}/aop">
            <include name="*.*"/>
         </fileset>
      </jar>

      <!-- build simpleejb.jar -->
      <jar jarfile="${build.lib}/simpleejb.jar">
         <fileset dir="${build.classes}">
            <include name="org/jboss/test/aop/simpleejb/"/>
         </fileset>
         <metainf dir="${build.resources}/aop/simpleejb/META-INF/"/>
      </jar>



      <jar jarfile="${build.lib}/aop-call-logging.aop">
         <fileset dir="${build.classes}">
            <include name="org/jboss/test/aop/test/CallLoggingUnitTestCase.class"/>
         </fileset>
         <metainf dir="${build.resources}/aop/calllogging/META-INF/"/>
      </jar>

      <jar jarfile="${build.lib}/aop-invocationlog.aop">
         <fileset dir="${build.classes}">
            <include name="org/jboss/test/aop/test/InvocationLogUnitTestCase.class"/>
            <include name="org/jboss/test/aop/bean/POJO.class"/>
            <include name="org/jboss/test/aop/bean/SomeException.class"/>
         </fileset>
         <fileset dir="${build.resources}/aop/invocationlog">
            <include name="META-INF/jboss-aop.xml"/>
         </fileset>
      </jar>
      <jar jarfile="${build.lib}/aop-invocationlog.sar">
         <fileset dir="${build.lib}">
            <include name="aop-invocationlog.aop"/>
         </fileset>
         <fileset dir="${build.resources}/aop/invocationlog">
            <include name="META-INF/jboss-service.xml"/>
         </fileset>
      </jar>

      <jar jarfile="${build.lib}/aoptest.aop"
         manifest="${build.etc}/manifest.mf">
         <fileset dir="${build.classes}">
            <include name="org/jboss/test/aop/bean/Implements*.class"/>
            <include name="org/jboss/test/aop/bean/CFlowedPOJO.class"/>
            <include name="org/jboss/test/aop/bean/InstanceOfInterceptor.class"/>
            <include name="org/jboss/test/aop/bean/InterceptorCounter.class"/>
            <include name="org/jboss/test/aop/bean/SomeInterface.class"/>
            <include name="org/jboss/test/aop/bean/EmptyInterface.class"/>
            <include name="org/jboss/test/aop/bean/Aspect.class"/>
            <include name="org/jboss/test/aop/bean/Person.class"/>
            <include name="org/jboss/test/aop/bean/Address.class"/>
            <include name="org/jboss/test/aop/bean/NoInterceptorsPOJO*.class"/>
            <include name="org/jboss/test/aop/bean/NonadvisedPOJO.class"/>
            <include name="org/jboss/test/aop/bean/SecuredPOJO.class"/>
            <include name="org/jboss/test/aop/bean/AnnotatedSecuredPOJO.class"/>
            <include name="org/jboss/test/aop/bean/SomeException.class"/>
            <include name="org/jboss/test/aop/bean/POJO*.class"/>
            <include name="org/jboss/test/aop/bean/Call*.class"/>
            <include name="org/jboss/test/aop/bean/SomeIntroduction.class"/>
            <include name="org/jboss/test/aop/bean/SubclassIntroduction.class"/>
            <include name="org/jboss/test/aop/bean/AnotherIntroduction.class"/>
            <include name="org/jboss/test/aop/bean/Introduction.class"/>
            <include name="org/jboss/test/aop/bean/Introduction2.class"/>
            <include name="org/jboss/test/aop/bean/InterfaceMixin.class"/>
            <include name="org/jboss/test/aop/bean/AnnotatedTxPOJO.class"/>
            <include name="org/jboss/test/aop/bean/TxPOJO.class"/>
            <include name="org/jboss/test/aop/bean/TxLockedPOJO.class"/>
            <include name="org/jboss/test/aop/bean/AnnotatedTxLockedPOJO.class"/>
            <include name="org/jboss/test/aop/bean/VersionedPOJO.class"/>
            <include name="org/jboss/test/aop/bean/SimpleInterceptor.class"/>
            <include name="org/jboss/test/aop/bean/SimpleInterceptorFactory.class"/>
            <include name="org/jboss/test/aop/bean/SimpleBeanInterceptor.class"/>
            <include name="org/jboss/test/aop/bean/SimpleBeanCallerInterceptor.class"/>
            <include name="org/jboss/test/aop/bean/SimpleBeanInterceptorFactory.class"/>
            <include name="org/jboss/test/aop/bean/Temperature*.class"/>
            <include name="org/jboss/test/aop/bean/Observable*.class"/>
            <include name="org/jboss/test/aop/bean/LogUtil*.class"/>
         </fileset>
         <fileset dir="${build.resources}/aop">
            <include name="META-INF/jboss-aop.xml"/>
         </fileset>
      </jar>

      <jar jarfile="${build.lib}/aoptest.sar">
         <fileset dir="${build.lib}">
            <include name="aoptest.aop"/>
         </fileset>
         <fileset dir="${build.classes}">
            <include name="org/jboss/test/aop/bean/AOPTester.class"/>
            <include name="org/jboss/test/aop/bean/AOPTesterMBean.class"/>
            <include name="org/jboss/test/aop/bean/RemotingTester.class"/>
            <include name="org/jboss/test/aop/bean/RemotingTesterMBean.class"/>
            <include name="org/jboss/test/aop/bean/SecurityTester.class"/>
            <include name="org/jboss/test/aop/bean/SecurityTesterMBean.class"/>
            <include name="org/jboss/test/aop/bean/TxTester.class"/>
            <include name="org/jboss/test/aop/bean/TxTesterMBean.class"/>
            <include name="org/jboss/test/aop/bean/TxLockTester*.class"/>
            <include name="org/jboss/test/aop/bean/TxLockTesterMBean.class"/>
            <include name="org/jboss/test/aop/bean/VersionedObjectTester.class"/>
            <include name="org/jboss/test/aop/bean/VersionedObjectTesterMBean.class"/>
            <include name="org/jboss/test/aop/bean/CacheTester.class"/>
            <include name="org/jboss/test/aop/bean/CacheTesterMBean.class"/>
            <include name="org/jboss/test/aop/bean/BeforeInterceptor.class"/>
            <include name="org/jboss/test/aop/bean/AfterInterceptor.class"/>
            <include name="org/jboss/test/aop/bean/LogUtil.class"/>
            <include name="org/jboss/test/aop/bean/Temperature.class"/>
            <include name="org/jboss/test/aop/bean/ObservableTester.class"/>
            <include name="org/jboss/test/aop/bean/ObservableTesterMBean.class"/>
         </fileset>
         <fileset dir="${build.resources}/aop">
            <include name="users.properties"/>
            <include name="roles.properties"/>
         </fileset>
         <fileset dir="${build.resources}/aop">
            <include name="META-INF/jboss-service.xml"/>
         </fileset>
      </jar>

      <jar jarfile="${build.lib}/simpleejb.sar">
         <fileset dir="${build.lib}">
            <include name="aoptest.aop"/>
         </fileset>
         <fileset dir="${build.lib}">
            <include name="simpleejb.jar"/>
         </fileset>
         <fileset dir="${build.classes}">
            <include name="org/jboss/test/aop/bean/SimpleBeanTester.class"/>
            <include name="org/jboss/test/aop/bean/SimpleBeanTesterMBean.class"/>
         </fileset>
         <fileset dir="${build.resources}/aop">
            <include name="users.properties"/>
            <include name="roles.properties"/>
         </fileset>
         <fileset dir="${build.resources}/aop/simpleejb">
            <include name="META-INF/jboss-service.xml"/>
         </fileset>
      </jar>

      <!-- ok, we have created the loadtime jars, let us now precompile the classes for standalone test  -->

<!--
      <aopc compilerclasspathref="aop.task.classpath">
         <classpath refid="thirdparty.classpath"/>
         <classpath path="${build.classes}"/>
         <src path="${build.classes}"/>
         <include name="org/jboss/test/aop/bean/**"/>
         <aoppath path="${source.resources}/aop/META-INF/jboss-aop.xml"/>
      </aopc>
-->

   </target>

  <!-- bank test -->
  <target name="_jars-bank">

    <!-- build banktest.jar -->
    <jar jarfile="${build.lib}/banktest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/bank/interfaces/**"/>
        <include name="org/jboss/test/bank/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/bank">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build bank.jar -->
    <jar jarfile="${build.lib}/bank.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/bank/interfaces/**"/>
        <include name="org/jboss/test/bank/ejb/**"/>
        <include name="org/jboss/test/bank/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/bank/ejb11">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <!-- build bank.jar -->
    <jar jarfile="${build.lib}/bank-ejb20.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/bank/interfaces/**"/>
        <include name="org/jboss/test/bank/ejb/**"/>
        <include name="org/jboss/test/bank/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/bank/ejb20">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- bank-new test -->
  <target name="_jars-bank-new">
    <mkdir dir="${build.lib}"/>

    <!-- build banknewtest.jar -->
    <jar jarfile="${build.lib}/banknewtest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/banknew/interfaces/**"/>
        <include name="org/jboss/test/banknew/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/bank">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build banknew.jar -->
    <jar jarfile="${build.lib}/banknew.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/banknew/interfaces/**"/>
        <include name="org/jboss/test/banknew/ejb/**"/>
        <include name="org/jboss/test/banknew/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/banknew">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- bankiiop test -->
  <target name="_jars-bankiiop">
    <mkdir dir="${build.lib}"/>

    <!-- build bankiioptest.jar -->
    <jar jarfile="${build.lib}/bankiioptest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/bankiiop/interfaces/**"/>
        <include name="org/jboss/test/bankiiop/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/bankiiop">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build bankiiop.jar -->
    <jar jarfile="${build.lib}/bankiiop.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/bankiiop/interfaces/**"/>
        <include name="org/jboss/test/bankiiop/ejb/**"/>
        <include name="org/jboss/test/bankiiop/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/bankiiop">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- bench test -->
  <target name="_jars-bench">
    <mkdir dir="${build.lib}"/>

    <!-- build bench.jar -->
    <jar jarfile="${build.lib}/bench.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/bench/interfaces/**"/>
        <include name="org/jboss/test/bench/ejb/**"/>
      </fileset>
      <fileset dir="${build.resources}/bench/ejb">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <!-- build bench.war -->
    <war warfile="${build.lib}/bench.war"
      webxml="${build.resources}/bench/web/WEB-INF/web.xml"
      manifest="${build.resources}/bench/web.mf">
      <webinf dir="${build.resources}/bench/web/WEB-INF">
        <include name="*"/>
        <exclude name="web.xml"/>
      </webinf>
      <lib dir="${build.lib}">
        <include name="jbosstest-bench-util.jar"/>
      </lib>
      <classes dir="${build.classes}">
        <include name="org/jboss/test/bench/servlet/**"/>
      </classes>
      <fileset dir="${build.resources}/bench/web/">
        <include name="*"/>
      </fileset>
    </war>

    <!-- build bench.ear -->
    <ear earfile="${build.lib}/bench.ear"
      appxml="${build.resources}/bench/ear/META-INF/application.xml">
      <fileset dir="${build.lib}">
        <include name="bench.jar"/>
        <include name="bench.war"/>
      </fileset>
    </ear>
  </target>

  <!-- bmp test -->
  <target name="_jars-bmp">
    <mkdir dir="${build.lib}"/>

    <!-- build bmptest.jar -->
    <jar jarfile="${build.lib}/bmptest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/bmp/interfaces/**"/>
        <include name="org/jboss/test/bmp/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/bmp">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build bmp.jar -->
    <jar jarfile="${build.lib}/bmp.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/bmp/interfaces/**"/>
        <include name="org/jboss/test/bmp/ejb/**"/>
        <include name="org/jboss/test/bmp/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/bmp">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- cache JARs -->
  <target name="_jars-cache">
    <!-- Not much to do with jar, but ... -->
    <mkdir dir="${build.resources}/META-INF"/>
    <copy todir="${build.resources}/META-INF" filtering="no">
      <fileset dir="${source.resources}/cache/META-INF">
        <include name="*-service*.xml"/>
      </fileset>
    </copy>

    <!-- pre-compile the aop classes -->
    <taskdef name="aopc" classname="org.jboss.aop.ant.AopC" classpathref="jboss.aop.classpath"/>
    <path id="aop.task.classpath">
      <path refid="javassist.classpath"/>
      <path refid="trove.classpath"/>
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.common.classpath"/>
    </path>

    <aopc compilerclasspathref="aop.task.classpath">
      <classpath refid="thirdparty.classpath"/>
      <classpath path="${build.classes}"/>
      <src path="${build.classes}"/>
      <include name="org/jboss/test/cache/test/standAloneAop/**"/>
      <aoppath path="${source.resources}/cache/standalone/META-INF/jboss-aop.xml"/>
    </aopc>

    <!-- build cachetest.jar -->
    <jar jarfile="${build.lib}/cachetest.jar"
      manifest="${build.resources}/cache/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cache/bean/*.class"/>
        <include name="org/jboss/test/cache/test/standAloneAop/*.class"/>
      </fileset>
      <metainf dir="${build.resources}/cache/META-INF/">
        <include name="jboss.xml"/>
        <include name="ejb-jar.xml"/>
      </metainf>
    </jar>


    <!-- build cachetest.sar -->
    <!--
    -->
    <delete file="${build.resources}/cache/META-INF/jboss-service.xml"/>
    <copy file="${build.resources}/cache/META-INF/tree-service.xml"
      tofile="${build.resources}/cache/META-INF/jboss-service.xml"/>

    <jar jarfile="${build.lib}/cachetest.sar">
      <fileset dir="${jboss.cache.lib}">
        <include name="jboss-cache.jar"/>
      </fileset>
      <fileset dir="${jgroups.jgroups.lib}">
        <include name="jgroups.jar"/>
      </fileset>
      <fileset dir="${build.resources}/cache">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <!-- build cacheAoptest.sar -->
    <!--
    -->
    <delete file="${build.resources}/cache/META-INF/jboss-service.xml"/>
    <copy file="${build.resources}/cache/META-INF/tree-aop-service.xml"
      tofile="${build.resources}/cache/META-INF/jboss-service.xml"/>

    <jar jarfile="${build.lib}/cacheAoptest.sar">
      <fileset dir="${jboss.cache.lib}">
        <include name="jboss-cache.jar"/>
      </fileset>
      <fileset dir="${jgroups.jgroups.lib}">
        <include name="jgroups.jar"/>
      </fileset>
      <fileset dir="${build.resources}/cache">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <!-- build cachetest.aop -->
    <!--
    <jar jarfile="${build.lib}/cachetest.aop">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cache/bean/aop/*.class"/>
      </fileset>
      <metainf dir="${build.resources}/cache/aop/META-INF/"/>
    </jar>
    -->

  </target>

  <!-- classloader test -->
  <target name="_jars-classloader" depends="compile-classes-only">
    <mkdir dir="${build.lib}"/>

    <!-- build concurrentloader.sar -->
    <jar jarfile="${build.lib}/concurrentloader.sar">
      <metainf dir="${source.resources}/classloader/concurrentloader"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/concurrentload/**"/>
      </fileset>
    </jar>
    <!-- build concurrentloader.ear which deploys the concurrentloader.sar
         with a HeirarchicalLoaderRepository
    -->
    <ear earfile="${build.lib}/concurrentloader.ear"
      appxml="${build.resources}/classloader/concurrentloader/application.xml">
      <metainf dir="${build.resources}/classloader/concurrentloader">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="concurrentloader.sar"/>
      </fileset>
    </ear>

    <!-- build circularity.sar -->
    <jar jarfile="${build.lib}/j0.jar" basedir="${build.classes}"
      includes="org/jboss/test/classloader/circularity/support/Class0.class"/>
    <jar jarfile="${build.lib}/j1.jar" basedir="${build.classes}"
      includes="org/jboss/test/classloader/circularity/support/Class1.class"/>
    <jar jarfile="${build.lib}/j2.jar" basedir="${build.classes}"
      includes="org/jboss/test/classloader/circularity/support/Class2.class"/>
    <jar jarfile="${build.lib}/j3.jar" basedir="${build.classes}"
      includes="org/jboss/test/classloader/circularity/support/Derived.class"/>
    <jar jarfile="${build.lib}/any0.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/Base.class"/>
        <include name="org/jboss/test/classloader/circularity/support/Class0.class"/>
        <include name="org/jboss/test/classloader/circularity/support/Class2.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/any1.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/Class0.class"/>
        <include name="org/jboss/test/classloader/circularity/support/Class2.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/login.jar" basedir="${build.classes}"
      manifest="${source.resources}/classloader/circularity/to-cl-util.mf"
      includes="org/jboss/test/classloader/circularity/support/UserOfLoginInfo.class"/>
    <jar jarfile="${build.lib}/usrmgr.jar" basedir="${build.classes}"
      manifest="${source.resources}/classloader/circularity/to-cl-util.mf"
      includes="org/jboss/test/classloader/circularity/support/UserOfUsrMgr.class"/>
    <jar jarfile="${build.lib}/cl-util.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/LoginInfo.class"/>
        <include name="org/jboss/test/classloader/circularity/support/UsrMgr.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/le0.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/Base.class"/>
        <include name="org/jboss/test/classloader/circularity/support/UserOfBase.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/le1.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/Base.class"/>
        <include name="org/jboss/test/classloader/circularity/support/Support.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/dl10.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/pkg0/Derived.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/dl11.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/Base.class"/>
      </fileset>
    </jar>

    <!-- Jars used by the Deadlock32 tests -->
    <jar jarfile="${build.lib}/dl-a.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/test/abc/TestA*"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/dl-b.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/test/abc/TestB*"/>
      </fileset>
    </jar>

    <!-- A jar that appears to contain java.sql classes for
      ScopingUnitTestCase.testSystemClasses2
    -->
    <mkdir dir="${build.classes}/java/sql"/>
    <touch file="${build.classes}/java/sql/Fake.class"/>
    <jar destfile="${build.lib}/java-sql.jar">
      <fileset dir="${build.classes}">
        <include name="java/sql/*"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/ha.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/support/HARMIServerImpl.class"/>
        <include name="org/jboss/test/classloader/circularity/support/HARMIServer.class"/>
        <include name="org/jboss/test/classloader/circularity/support/HARMIServerImpl_Stub.class"/>
      </fileset>
    </jar>


    <jar jarfile="${build.lib}/circularity.sar">
      <metainf dir="${source.resources}/classloader/circularity"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/circularity/*"/>
        <include name="org/jboss/test/classloader/circularity/test/*"/>
      </fileset>
    </jar>

    <!-- build interrupt.sar -->
    <jar jarfile="${build.lib}/interrupt.sar">
      <metainf dir="${source.resources}/classloader/interrupt"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/interrupt/**"/>
      </fileset>
    </jar>

    <!-- build loadingresource.sar -->
    <jar jarfile="${build.lib}/loading.sar">
      <metainf dir="${source.resources}/classloader/resource">
        <include name="jboss-service.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/resource/**"/>
      </fileset>
    </jar>

    <ear earfile="${build.lib}/loadingresource.ear"
      appxml="${build.resources}/classloader/resource/application.xml">
      <metainf dir="${build.resources}/classloader/resource">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.resources}/classloader/resource">
        <include name="dtds/*"/>
      </fileset>
      <fileset dir="${build.lib}">
        <include name="loading.sar"/>
      </fileset>
    </ear>

    <!-- Create unpacked loadingresource1 ear -->
    <property name="ear1.dist"
      value="${build.lib}/unpacked/loadingresource1.ear"/>
    <mkdir dir="${ear1.dist}/META-INF"/>
    <copy todir="${ear1.dist}/META-INF">
      <fileset dir="${build.resources}/classloader/resource">
        <include name="application.xml"/>
        <include name="jboss-app.xml"/>
      </fileset>
    </copy>
    <mkdir dir="${ear1.dist}/loading.sar/META-INF"/>
    <unzip src="${build.lib}/loading.sar" dest="${ear1.dist}/loading.sar"/>
    <copy file="${build.resources}/classloader/resource/jboss-serviceX.xml"
      tofile="${ear1.dist}/loading.sar/META-INF/jboss-service.xml"
      overwrite="true">
      <filterset>
        <filter token="VERSION" value="1"/>
      </filterset>
    </copy>
    <copy file="${build.resources}/classloader/resource/dtds/sampleX.dtd"
      tofile="${ear1.dist}/dtds/sample1.dtd"/>
    <!-- Create unpacked loadingresource2 ear -->
    <property name="ear2.dist"
      value="${build.lib}/unpacked/loadingresource2.ear"/>
    <mkdir dir="${ear2.dist}/META-INF"/>
    <copy todir="${ear2.dist}/META-INF">
      <fileset dir="${build.resources}/classloader/resource">
        <include name="application.xml"/>
        <include name="jboss-app.xml"/>
      </fileset>
    </copy>
    <mkdir dir="${ear2.dist}/loading.tmp/META-INF"/>
    <unzip src="${build.lib}/loading.sar" dest="${ear2.dist}/loading.tmp"/>
    <copy file="${build.resources}/classloader/resource/jboss-serviceX.xml"
      tofile="${ear2.dist}/loading.tmp/META-INF/jboss-service.xml"
      overwrite="true">
      <filterset>
        <filter token="VERSION" value="2"/>
      </filterset>
    </copy>
    <copy todir="${ear2.dist}//loading.tmp/dtds">
      <fileset dir="${build.resources}/classloader/resource/dtds"/>
    </copy>
    <copy file="${build.resources}/classloader/resource/dtds/sampleX.dtd"
      tofile="${ear2.dist}/loading.tmp/dtds/sample2.dtd"/>
    <zip destfile="${ear2.dist}/loading.sar" basedir="${ear2.dist}/loading.tmp"/>
    <delete dir="${ear2.dist}/loading.tmp"/>

    <!-- build loadinclazz.sar -->
    <jar jarfile="${build.lib}/loadingclazz.sar">
      <metainf dir="${build.resources}/classloader/clazz">
        <include name="jboss-service.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/clazz/**"/>
      </fileset>
    </jar>

    <!-- Build version 1 of the singleton.jar -->
    <copy tofile="${build.gen-src}/org/jboss/test/classloader/scoping/singleton/MySingleton.java"
      file="${source.java}/org/jboss/test/classloader/scoping/singleton/MySingleton_V1.txt"
      overwrite="true"/>
    <checksum property="v1singletonmd5"
      file="${build.gen-src}/org/jboss/test/classloader/scoping/singleton/MySingleton.java"/>
    <echo message="V1 MySingleton.java cksum: ${v1singletonmd5}"/>
    <copy todir="${build.classes}/org/jboss/test/classloader/scoping/singleton"
      overwrite="true">
      <fileset dir="${source.java}/org/jboss/test/classloader/scoping/singleton">
        <include name="jboss-service.xml"/>
      </fileset>
      <filterset>
        <filter token="VERSION" value="V1"/>
      </filterset>
    </copy>

    <javac destdir="${build.classes}" optimize="${javac.optimize}"
      target="${javac.target}" debug="${javac.debug}">
      <src path="${build.gen-src}"/>
      <src path="${source.java}"/>
      <classpath refid="tests.classpath"/>
      <include name="org/jboss/test/classloader/scoping/singleton/**"/>
    </javac>
    <jar jarfile="${build.lib}/singleton1.sar">
      <metainf dir="${build.classes}/org/jboss/test/classloader/scoping/singleton">
        <include name="jboss-service.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/scoping/singleton/*"/>
        <exclude name="org/jboss/test/classloader/scoping/singleton/*.xml"/>
      </fileset>
    </jar>

    <!-- Build version 2 of the singleton.jar -->
    <delete dir="${build.classes}/org/jboss/test/classloader/scoping/singleton"/>
    <copy tofile="${build.gen-src}/org/jboss/test/classloader/scoping/singleton/MySingleton.java"
      file="${source.java}/org/jboss/test/classloader/scoping/singleton/MySingleton_V2.txt"
      overwrite="true"/>
    <checksum property="v2singletonmd5"
      file="${build.gen-src}/org/jboss/test/classloader/scoping/singleton/MySingleton.java"/>
    <echo message="V2 MySingleton.java cksum: ${v2singletonmd5}"/>
    <copy todir="${build.classes}/org/jboss/test/classloader/scoping/singleton"
      overwrite="true">
      <fileset dir="${source.java}/org/jboss/test/classloader/scoping/singleton">
        <include name="jboss-service.xml"/>
      </fileset>
      <filterset>
        <filter token="VERSION" value="V2"/>
      </filterset>
    </copy>

    <javac destdir="${build.classes}" optimize="${javac.optimize}"
      target="${javac.target}" debug="${javac.debug}">
      <src path="${build.gen-src}"/>
      <src path="${source.java}"/>
      <classpath refid="tests.classpath"/>
      <include name="org/jboss/test/classloader/scoping/singleton/**"/>
    </javac>
    <jar jarfile="${build.lib}/singleton2.sar">
      <metainf dir="${build.classes}/org/jboss/test/classloader/scoping/singleton">
        <include name="jboss-service.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/scoping/singleton/*"/>
        <exclude name="org/jboss/test/classloader/scoping/singleton/*.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/log4j113-ejb.jar">
      <metainf dir="${build.resources}/classloader/scoping/override/log4j113/META-INF">
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/scoping/override/ejb/log4j113/*"/>
      </fileset>
      <fileset dir="${build.resources}/classloader/scoping/override/log4j113">
        <include name="*.jar"/>
      </fileset>
    </jar>

    <war warfile="${build.lib}/log4j113.war"
      webxml="${build.resources}/classloader/scoping/override/log4j113/WEB-INF/web.xml">
      <webinf dir="${build.resources}/classloader/scoping/override/log4j113/WEB-INF">
        <include name="jboss-web.xml"/>
      </webinf>
      <lib dir="${build.resources}/classloader/scoping/override/log4j113">
        <include name="*.jar"/>
      </lib>
      <classes dir="${build.classes}">
        <include name="org/jboss/test/classloader/scoping/override/web/**"/>
      </classes>
      <classes dir="${build.resources}/classloader/scoping/override/log4j113">
        <include name="log4j.properties"/>
      </classes>
    </war>

    <war warfile="${build.lib}/oldxerces.war"
      webxml="${build.resources}/classloader/scoping/override/xml/web.xml">
      <webinf dir="${build.resources}/classloader/scoping/override/xml">
        <include name="jboss-web.xml"/>
      </webinf>
      <lib dir="${build.resources}/classloader/scoping/override/xml">
        <include name="*.jar"/>
      </lib>
      <fileset dir="${build.resources}/classloader/scoping/override/xml">
        <include name="test.jsp"/>
      </fileset>
    </war>

    <!-- build classpath.sar -->
    <jar jarfile="${build.lib}/classpath.sar">
      <metainf dir="${source.resources}/classloader/classpath">
        <include name="jboss-service.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/classpath/**"/>
      </fileset>
    </jar>

    <!-- build scopedtx.jar -->
    <jar jarfile="${build.lib}/scopedtx.jar">
      <metainf dir="${source.resources}/classloader/scoping/transaction/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/classloader/scoping/transaction/**"/>
      </fileset>
    </jar>

      <!-- Build the shared-jndi.war/sar -->
      <jar destfile="${build.lib}/shared-jndi.sar">
         <metainf dir="${build.resources}/classloader/scoping/naming/xml">
            <include name="jboss-service.xml" />
         </metainf>
         <fileset dir="${build.classes}">
            <include name="org/jboss/test/classloader/scoping/naming/service/*"/>
         </fileset>
      </jar>
      <war destfile="${build.lib}/shared-jndi.war"
         webxml="${build.resources}/classloader/scoping/naming/xml/web.xml">
         <webinf dir="${build.resources}/classloader/scoping/naming/xml">
            <include name="jboss-web.xml" />
         </webinf>
         <classes dir="${build.classes}">
            <include name="org/jboss/test/classloader/scoping/naming/service/BindValue.class"/>
            <include name="org/jboss/test/classloader/scoping/naming/web/*"/>
         </classes>
      </war>

  </target>

  <target name="_jars-client">
    <mkdir dir="${build.lib}"/>

    <jar destfile="${build.lib}/app-client.jar">
      <metainf dir="${build.resources}/client">
        <include name="*-client.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/client/test/SystemPropertyCallbackHandler.class"/>
      </fileset>
    </jar>
    <ear earfile="${build.lib}/app-client.ear"
      appxml="${build.resources}/client/application.xml">
      <metainf dir="${build.resources}/client">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="cts.jar"/>
        <include name="app-client.jar"/>
      </fileset>
      <fileset dir="${build.resources}/client">
        <include name="JndiConfig.bsh"/>
      </fileset>
    </ear>
  </target>

  <!-- cmp2 tests -->
  <target name="_jars-cmp2">
    <mkdir dir="${build.lib}"/>

    <!-- build cmp2-relationship.jar -->
    <jar jarfile="${build.lib}/cmp2-relationship.jar">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/cmp2/relationship/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/relationship">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-cacheinvalidation.jar -->
    <copy file="${build.resources}/cmp2/cacheinvalidation/META-INF/jdbcpm-jboss.xml"
       tofile="${build.resources}/cmp2/cacheinvalidation/META-INF/jboss.xml"/>
    <jar jarfile="${build.lib}/cmp2-cacheinvalidation.jar">
      <fileset dir="${build.classes}">
       <patternset refid="common.test.client.classes"/>
       <include name="org/jboss/test/cmp2/cacheinvalidation/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/cacheinvalidation">
       <include name="**/*.*"/>
       <exclude name="**/jdbc*.xml"/>
      </fileset>
    </jar>
    <delete file="${build.resources}/cmp2/cacheinvalidation/META-INF/jboss.xml"/>
    <copy file="${build.resources}/cmp2/cacheinvalidation/META-INF/jdbc2pm-jboss.xml"
       tofile="${build.resources}/cmp2/cacheinvalidation/META-INF/jboss.xml"/>
    <jar jarfile="${build.lib}/cmp2-jdbc2pm-cacheinvalidation.jar">
      <fileset dir="${build.classes}">
       <patternset refid="common.test.client.classes"/>
       <include name="org/jboss/test/cmp2/cacheinvalidation/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/cacheinvalidation">
       <include name="**/*.*"/>
       <exclude name="**/jdbc*.xml"/>
      </fileset>
    </jar>
    <delete file="${build.resources}/cmp2/cacheinvalidation/META-INF/jboss.xml"/>

    <!-- build cmp2-readonly.jar -->
    <jar jarfile="${build.lib}/cmp2-readonly.jar">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/cmp2/readonly/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/readonly">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-ejbselect.jar -->
    <jar jarfile="${build.lib}/cmp2-ejbselect.jar">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/cmp2/ejbselect/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/ejbselect">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmr-postcreateswritten.jar -->
    <jar jarfile="${build.lib}/cmr-postcreateswritten.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/cmr/ejb/*"/>
        <include name="org/jboss/test/cmp2/cmr/interfaces/*"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/cmr">
        <include name="**/*.*"/>
      </fileset>
    </jar>

    <!-- build cmp2-simple.jar -->
    <jar jarfile="${build.lib}/cmp2-simple.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/cmp2/simple/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/simple">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/framework/*.*"/>
    </jar>

    <!-- build cmp2-commerce.jar -->
    <jar jarfile="${build.lib}/cmp2-commerce.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/commerce/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/commerce">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-lob.jar -->
    <jar jarfile="${build.lib}/cmp2-lob.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/lob/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/lob">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-optimisticlock.jar -->
    <jar jarfile="${build.lib}/cmp2-optimisticlock.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/optimisticlock/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/optimisticlock">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-passivation.jar -->
    <jar jarfile="${build.lib}/cmp2-passivation.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/passivation/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/passivation">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-fkmapping.jar -->
    <jar jarfile="${build.lib}/cmp2-fkmapping.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/fkmapping/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/fkmapping">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-fkstackoverflow.jar -->
    <jar jarfile="${build.lib}/cmp2-fkstackoverflow.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/fkstackoverflow/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/fkstackoverflow">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-audit.jar -->
    <jar jarfile="${build.lib}/cmp2-audit.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/audit/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/audit">
        <include name="**/*.*"/>
      </fileset>
    </jar>

    <!-- build cmp2-cmrstress.jar -->
    <jar jarfile="${build.lib}/cmp2-cmrstress.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/cmrstress/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/cmrstress">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-keygen.jar -->
    <jar jarfile="${build.lib}/cmp2-keygen.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/keygen/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/keygen">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <jar jarfile="${build.lib}/cmp2-perf.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/perf/**"/>
      </fileset>
      <metainf dir="${build.resources}/cmp2/perf"/>
    </jar>

    <!-- build cmp2-dbschema.jar -->
    <jar jarfile="${build.lib}/cmp2-dbschema.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/dbschema/**"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/relationship/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/relationship">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <jar jarfile="${build.lib}/cmp2-idxandusersql.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/idxandusersql/**"/>
      </fileset>
      <!--
      <fileset dir="${build.resources}/cmp2/idxandusersql">
        <include name="**/*.*"/>
      </fileset>
      -->
      <metainf dir="${source.java}/org/jboss/test/cmp2/idxandusersql/META-INF"/>


      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-enum.jar -->
    <jar jarfile="${build.lib}/cmp2-enum.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/enum/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/enum">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>

    <!-- build cmp2-cmrtansaction.jar -->
    <jar jarfile="${build.lib}/cmp2-cmrtransaction.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cmp2/cmrtransaction/**"/>
      </fileset>
      <fileset dir="${build.resources}/cmp2/cmrtransaction">
        <include name="**/*.*"/>
      </fileset>
    </jar>
  </target>

  <!-- cts test -->
  <target name="_jars-cts">
    <mkdir dir="${build.lib}"/>

    <!-- Compile the ClientCallbackImpl stub -->
    <rmic base="${build.classes}"
      sourcebase="${build.classes}"
      verify="${rmic.verify}"
      iiop="${rmic.iiop}"
      iiopopts="${rmic.iiopops}"
      idl="${rmic.idl}"
      idlopts="${rmic.idlops}"
      debug="${rmic.debug}"
      stubVersion="${rmic.stubVersion}"
      >
      <classpath refid="tests.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>
      <include name="org/jboss/test/cts/test/ClientCallbackImpl.class"/>
    </rmic>

    <!-- build ctstest.jar -->
    <jar jarfile="${build.lib}/ctstest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/cts/interfaces/**"/>
        <include name="org/jboss/test/cts/test/**"/>
        <include name="org/jboss/test/cts/jms/**"/>
        <include name="org/jboss/test/cts/keys/**"/>
      </fileset>
      <fileset dir="${build.resources}/cts">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build cts.jar -->
    <jar jarfile="${build.lib}/cts.jar">
      <metainf dir="${build.resources}/cts/META-INF">
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/cts/interfaces/**"/>
        <include name="org/jboss/test/cts/ejb/**"/>
        <include name="org/jboss/test/cts/beans/**"/>
        <include name="org/jboss/test/cts/jms/**"/>
        <include name="org/jboss/test/cts/keys/**"/>
        <include name="org/jboss/test/cts/test/*_Stub*.class"/>
        <include name="org/jboss/test/util/ejb/*"/>
      </fileset>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>
    <!-- build a duplicate cts.jar with new home bindings -->
    <jar jarfile="${build.lib}/cts2.jar">
      <metainf dir="${build.resources}/cts/metainf2">
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/cts/interfaces/**"/>
        <include name="org/jboss/test/cts/ejb/**"/>
        <include name="org/jboss/test/cts/beans/**"/>
        <include name="org/jboss/test/cts/jms/**"/>
        <include name="org/jboss/test/cts/keys/**"/>
        <include name="org/jboss/test/cts/test/*_Stub*.class"/>
      </fileset>
    </jar>

    <!-- Build version 1 of the cts-cmp2 ear -->
    <delete dir="${build.gen-src}/org/jboss/test/cts"/>
    <mkdir dir="${build.gen-src}/org/jboss/test/cts/ejb"/>
    <mkdir dir="${build.gen-src}/org/jboss/test/cts/interfaces"/>
    <copy tofile="${build.gen-src}/org/jboss/test/cts/interfaces/CtsCmp2Local.java"
      file="${source.java}/org/jboss/test/cts/interfaces/CtsCmp2Local_V1.txt"
      overwrite="true"/>
    <copy tofile="${build.gen-src}/org/jboss/test/cts/ejb/CtsCmp2Bean.java"
      file="${source.java}/org/jboss/test/cts/ejb/CtsCmp2Bean_V1.txt"
      overwrite="true"/>
    <copy tofile="${build.gen-src}/org/jboss/test/cts/service/CtsCmpService.java"
      file="${source.java}/org/jboss/test/cts/service/CtsCmpService_V1.txt"
      overwrite="true"/>
    <javac destdir="${build.classes}" optimize="${javac.optimize}"
      target="${javac.target}" debug="${javac.debug}">
      <src path="${build.gen-src}"/>
      <src path="${source.java}"/>
      <classpath refid="tests.classpath"/>
      <include name="org/jboss/test/cts/**"/>
    </javac>
    <jar jarfile="${build.lib}/cts-v1cmp.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cts/service/CtsCmpService*.class"/>
        <include name="org/jboss/test/util/Debug.class"/>
      </fileset>
      <metainf dir="${build.resources}/cts/cmpv1">
        <include name="jboss-service.xml"/>
      </metainf>
    </jar>
    <jar jarfile="${build.lib}/cts-v1cmp.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/cts/ejb/CtsCmp2*.class"/>
        <include name="org/jboss/test/cts/interfaces/CtsCmp2*"/>
      </fileset>
      <metainf dir="${build.resources}/cts/cmpv1">
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
        <include name="jbosscmp-jdbc.xml"/>
      </metainf>
    </jar>
    <ear earfile="${build.lib}/cts-v1cmp.ear"
      appxml="${build.resources}/cts/cmpv1/application.xml">
      <metainf dir="${build.resources}/cts/cmpv1">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="cts-v1cmp.jar"/>
      </fileset>
    </ear>
    <ear earfile="${build.lib}/cts-v1cmp-sar.ear"
      appxml="${build.resources}/cts/cmpv1/application.xml">
      <metainf dir="${build.resources}/cts/cmpv1/ear+sar">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="cts-v1cmp.jar"/>
        <include name="cts-v1cmp.sar"/>
      </fileset>
    </ear>

    <!-- Build version 2 of the cts-cmp2 ear -->
    <delete dir="${build.classes}/org/jboss/test/cts">
      <include name="**/CtsCmp2Local.class"/>
      <include name="**/CtsCmp2Bean.class"/>
      <include name="**/CtsCmpService*.class"/>
    </delete>
    <delete dir="${build.gen-src}/org/jboss/test/cts"/>
    <copy tofile="${build.gen-src}/org/jboss/test/cts/interfaces/CtsCmp2Local.java"
      file="${source.java}/org/jboss/test/cts/interfaces/CtsCmp2Local_V2.txt"
      overwrite="true"/>
    <copy tofile="${build.gen-src}/org/jboss/test/cts/ejb/CtsCmp2Bean.java"
      file="${source.java}/org/jboss/test/cts/ejb/CtsCmp2Bean_V2.txt"
      overwrite="true"/>
    <copy tofile="${build.gen-src}/org/jboss/test/cts/service/CtsCmpService.java"
      file="${source.java}/org/jboss/test/cts/service/CtsCmpService_V2.txt"
      overwrite="true"/>
    <javac destdir="${build.classes}" optimize="${javac.optimize}"
      target="${javac.target}" debug="${javac.debug}">
      <src path="${build.gen-src}"/>
      <src path="${source.java}"/>
      <classpath refid="tests.classpath"/>
      <include name="org/jboss/test/cts/**"/>
    </javac>
    <jar jarfile="${build.lib}/cts-v2cmp.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/cts/service/CtsCmpService*.class"/>
        <include name="org/jboss/test/util/Debug.class"/>
      </fileset>
      <metainf dir="${build.resources}/cts/cmpv2">
        <include name="jboss-service.xml"/>
      </metainf>
    </jar>
    <jar jarfile="${build.lib}/cts-v2cmp.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/cts/ejb/CtsCmp2*.class"/>
        <include name="org/jboss/test/cts/interfaces/CtsCmp2*"/>
      </fileset>
      <metainf dir="${build.resources}/cts/cmpv2">
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
        <include name="jbosscmp-jdbc.xml"/>
      </metainf>
    </jar>
    <ear earfile="${build.lib}/cts-v2cmp.ear"
      appxml="${build.resources}/cts/cmpv2/application.xml">
      <metainf dir="${build.resources}/cts/cmpv2">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="cts-v2cmp.jar"/>
      </fileset>
    </ear>
    <ear earfile="${build.lib}/cts-v2cmp-sar.ear"
      appxml="${build.resources}/cts/cmpv2/application.xml">
      <metainf dir="${build.resources}/cts/cmpv2/ear+sar">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="cts-v2cmp.jar"/>
        <include name="cts-v2cmp.sar"/>
      </fileset>
    </ear>

  </target>

  <!-- dbtest test -->
  <target name="_jars-dbtest">
    <mkdir dir="${build.lib}"/>

    <!-- build dbtestclient.jar -->
    <jar jarfile="${build.lib}/dbtestclient.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/dbtest/interfaces/**"/>
        <include name="org/jboss/test/dbtest/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/dbtest">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build dbtest.jar -->
    <jar jarfile="${build.lib}/dbtest.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/dbtest/interfaces/**"/>
        <include name="org/jboss/test/dbtest/ejb/**"/>
        <include name="org/jboss/test/dbtest/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/dbtest">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- deadlock test -->
  <target name="_jars-deadlock">
    <mkdir dir="${build.lib}"/>

    <!-- build deadlocktest.jar -->
    <jar jarfile="${build.lib}/deadlocktest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/deadlock/interfaces/**"/>
        <include name="org/jboss/test/deadlock/test/**"/>
        <include name="org/somepackage/**"/>
      </fileset>
      <fileset dir="${build.resources}/deadlock">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build deadlock.jar -->
    <jar jarfile="${build.lib}/deadlock.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/deadlock/interfaces/**"/>
        <include name="org/jboss/test/deadlock/bean/**"/>
        <include name="org/somepackage/**"/>
      </fileset>
      <fileset dir="${build.resources}/deadlock">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

  </target>

  <!-- jca ejbconf readonly tests -->
  <target name="_jars-ejbconf">
    <mkdir dir="${build.lib}"/>

    <!-- build ejbconf-test.jar -->
    <jar jarfile="${build.lib}/ejbconf-test.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/ejbconf/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/ejbconf/readonly/">
        <include name="META-INF/*.*"/>
      </fileset>
    </jar>
  </target>

  <!-- entity test -->
  <target name="_jars-entity">
    <mkdir dir="${build.lib}"/>

    <!-- build jboss-test-entity.jar -->
    <jar jarfile="${build.lib}/jboss-test-entity.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/entity/interfaces/**"/>
        <include name="org/jboss/test/entity/beans/**"/>
        <include name="org/jboss/test/entity/test/EntityUnitTestCase"/>
      </fileset>
      <fileset dir="${build.resources}/entity/entity">
        <include name="**"/>
      </fileset>
    </jar>

    <!-- build jboss-test-entity.jar -->
    <jar jarfile="${build.lib}/jboss-test-pathological-entity.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/entity/interfaces/**"/>
        <include name="org/jboss/test/entity/ejb/**"/>
        <include name="org/jboss/test/entity/test/PathologicalUnitTestCase"/>
      </fileset>
      <fileset dir="${build.resources}/entity/pathological">
        <include name="**"/>
      </fileset>
    </jar>

    <!-- build jboss-test-ejbload.jar -->
    <jar jarfile="${build.lib}/jboss-test-ejbload.jar">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/entity/interfaces/**"/>
        <include name="org/jboss/test/entity/ejb/**"/>
        <include name="org/jboss/test/entity/test/EJBLoadUnitTestCase"/>
      </fileset>
      <fileset dir="${build.resources}/entity/ejbload">
        <include name="**"/>
      </fileset>
    </jar>
  </target>

  <!-- entityexc test -->
  <target name="_jars-entityexc">
    <mkdir dir="${build.lib}"/>

    <!-- build entityexctest.jar -->
    <jar jarfile="${build.lib}/entityexctest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/entityexc/interfaces/**"/>
        <include name="org/jboss/test/entityexc/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/entityexc">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build entityexc.jar -->
    <jar jarfile="${build.lib}/entityexc.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/entityexc/interfaces/**"/>
        <include name="org/jboss/test/entityexc/ejb/**"/>
      </fileset>
      <fileset dir="${build.resources}/entityexc">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- excepiiop test -->
  <target name="_jars-excepiiop">
    <mkdir dir="${build.lib}"/>

    <!-- build excepiioptest.jar -->
    <jar jarfile="${build.lib}/excepiioptest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/excepiiop/interfaces/**"/>
        <include name="org/jboss/test/excepiiop/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/excepiiop">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build excepiiop.jar -->
    <jar jarfile="${build.lib}/excepiiop.jar">
      <metainf dir="${build.resources}/excepiiop/META-INF"/>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/excepiiop/interfaces/**"/>
        <include name="org/jboss/test/excepiiop/ejb/**"/>
      </fileset>
    </jar>
  </target>

  <!-- exception tests -->
  <target name="_jars-exception">
    <mkdir dir="${build.lib}"/>

    <!-- build exception.jar -->
    <jar jarfile="${build.lib}/exception.jar">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/exception/**"/>
      </fileset>
      <fileset dir="${build.resources}/exception">
        <include name="**/*.*"/>
      </fileset>
      <zipfileset src="${junitejb.junitejb.lib}/junitejb.jar"
        includes="net/**/*.*"/>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/**/*.*"/>
    </jar>
  </target>

  <!-- foe-deployer test -->
  <target name="_jars-foedeployer">
    <mkdir dir="${build.lib}"/>
    <!-- First task is to copy the Foe-Deployer SAR to the current lib directory -->
    <echo>${project.root}</echo>
    <copy todir="${build.lib}" filtering="no">
      <fileset dir="${project.root}/varia/output/lib">
        <include name="foe-deployer-3.2.sar"/>
      </fileset>
    </copy>

    <!-- build foe-deployer-simple-test.wlar -->
    <jar jarfile="${build.lib}/foe-deployer-simple-test.wlar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/foedeployer/ejb/simple/**"/>
      </fileset>
      <fileset dir="${build.resources}/foedeployer/simple/">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- build foe-deployer-message-test.wlar -->
    <jar jarfile="${build.lib}/foe-deployer-message-test.wlar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/foedeployer/ejb/message/**"/>
      </fileset>
      <fileset dir="${build.resources}/foedeployer/message/">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- build foe-deployer-o2mb-test.wlar -->
    <jar jarfile="${build.lib}/foe-deployer-o2mb-test.wlar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/foedeployer/ejb/o2mb/**"/>
      </fileset>
      <fileset dir="${build.resources}/foedeployer/o2mb/">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- build foe-deployer-m2mb-test.wlar -->
    <jar jarfile="${build.lib}/foe-deployer-m2mb-test.wlar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/foedeployer/ejb/m2mb/**"/>
      </fileset>
      <fileset dir="${build.resources}/foedeployer/m2mb/">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- build foe-deployer-ql-test.wlar -->
    <jar jarfile="${build.lib}/foe-deployer-ql-test.wlar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/foedeployer/ejb/ql/**"/>
      </fileset>
      <fileset dir="${build.resources}/foedeployer/ql/">
        <include name="META-INF/**"/>
      </fileset>
    </jar>
  </target>

  <!-- hello test -->
  <target name="_jars-hello">
    <mkdir dir="${build.lib}"/>

    <!-- build hellotest.jar -->
    <jar jarfile="${build.lib}/hellotest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/hello/interfaces/**"/>
        <include name="org/jboss/test/hello/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/hello">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build hello.jar -->
    <jar destfile="${build.lib}/hello.jar">
      <metainf dir="${build.resources}/hello/META-INF">
         <include name="ejb-jar.xml" />
         <include name="jboss.xml" />
         <include name="jbosscmp-jdbc.xml" />
      </metainf>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/hello/interfaces/**"/>
        <include name="org/jboss/test/hello/ejb/**"/>
      </fileset>
    </jar>

    <!-- build hello-ha.jar -->
    <jar destfile="${build.lib}/hello-ha.jar">
      <zipfileset dir="${build.resources}/hello/META-INF"
         includes="ejb-jar-ha.xml" fullpath="META-INF/ejb-jar.xml" />
      <zipfileset dir="${build.resources}/hello/META-INF"
         includes="jboss-ha.xml" fullpath="META-INF/jboss.xml" />
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/hello/interfaces/**"/>
        <include name="org/jboss/test/hello/ejb/**"/>
      </fileset>
    </jar>
  </target>

  <!-- helloiiop test -->
  <target name="_jars-helloiiop">
    <mkdir dir="${build.lib}"/>

    <!-- build helloiioptest.jar -->
    <jar jarfile="${build.lib}/helloiioptest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/helloiiop/interfaces/**"/>
        <include name="org/jboss/test/helloiiop/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/helloiiop">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build helloiiop.jar -->
    <jar jarfile="${build.lib}/helloiiop.jar">
      <metainf dir="${build.resources}/helloiiop/META-INF"/>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/helloiiop/interfaces/**"/>
        <include name="org/jboss/test/helloiiop/ejb/**"/>
      </fileset>
    </jar>
  </target>

  <!-- hellojrmpiiop test -->
  <target name="_jars-hellojrmpiiop">
    <mkdir dir="${build.lib}"/>

    <!-- build hellojrmpiioptest.jar -->
    <jar jarfile="${build.lib}/hellojrmpiioptest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/hellojrmpiiop/interfaces/**"/>
        <include name="org/jboss/test/hellojrmpiiop/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/hellojrmpiiop">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build hellojrmpiiop.jar -->
    <jar jarfile="${build.lib}/hellojrmpiiop.jar">
      <metainf dir="${build.resources}/hellojrmpiiop/META-INF"/>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/hellojrmpiiop/interfaces/**"/>
        <include name="org/jboss/test/hellojrmpiiop/ejb/**"/>
      </fileset>
    </jar>
  </target>

  <!-- hibernate tests -->
  <target name="_jars-hibernate">
     <mkdir dir="${build.lib}"/>

     <jar basedir="${build.classes}" destfile="${build.lib}/hib-test.har">
       <metainf dir="${source.resources}/hibernate/mappings">
         <include name="*"/>
       </metainf>
       <metainf dir="${source.resources}/hibernate/har-deployment">
         <include name="*"/>
       </metainf>
       <include name="org/jboss/test/hibernate/model/*"/>
     </jar>

     <jar basedir="${build.classes}" destfile="${build.lib}/hib-test-ejb.jar">
       <metainf dir="${source.resources}/hibernate/ejb/META-INF">
         <include name="*"/>
       </metainf>
       <include name="org/jboss/test/hibernate/ejb/**"/>
       <include name="org/jboss/test/hibernate/ProfileService.class"/>
     </jar>

     <ear earfile="${build.lib}/hib-test.ear"
          appxml="${source.resources}/hibernate/ear/application.xml">
       <metainf dir="${source.resources}/hibernate/ear">
         <include name="jboss-app.xml" />
       </metainf>
       <fileset dir="${build.lib}">
         <include name="hib-test-ejb.jar" />
         <include name="hib-test.har" />
       </fileset>
     </ear>

   </target>

  <!-- idgen test -->
  <target name="_jars-idgen">
    <mkdir dir="${build.lib}"/>

    <!-- build idgentest.jar -->
    <jar jarfile="${build.lib}/idgentest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/idgen/interfaces/**"/>
        <include name="org/jboss/test/idgen/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/idgen">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build idgen.jar -->
    <jar jarfile="${build.lib}/idgen.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/idgen/interfaces/**"/>
        <include name="org/jboss/test/idgen/ejb/**"/>
        <include name="org/jboss/test/idgen/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/idgen">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- iiop parameter passing test -->
  <target name="_jars-iiop">
    <mkdir dir="${build.lib}"/>

    <!-- build iioptest.jar -->
    <jar jarfile="${build.lib}/iioptest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/iiop/interfaces/**"/>
        <include name="org/jboss/test/iiop/util/**"/>
        <include name="org/jboss/test/iiop/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/iiop">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build iiop.jar -->
    <jar jarfile="${build.lib}/iiop.jar">
      <metainf dir="${build.resources}/iiop/META-INF"/>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/iiop/interfaces/**"/>
        <include name="org/jboss/test/iiop/util/**"/>
        <include name="org/jboss/test/iiop/ejb/**"/>
      </fileset>
    </jar>
  </target>

  <!-- invokers test -->
  <target name="_jars-invokers">
    <mkdir dir="${build.lib}"/>

    <!-- build invokers-client.jar -->
    <jar jarfile="${build.lib}/invokers-client.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/invokers/interfaces/**"/>
      </fileset>
    </jar>

    <!-- build invokers-comp.jar -->
    <jar jarfile="${build.lib}/invokers.sar">
      <metainf dir="${build.resources}/invokers/service-inf"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/invokers/ejb/Compression*.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/invokers.jar">
      <metainf dir="${build.resources}/invokers/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/invokers/interfaces/**"/>
        <include name="org/jboss/test/invokers/ejb/**"/>
      </fileset>
      <fileset dir="${build.lib}">
        <include name="invokers.sar"/>
      </fileset>
    </jar>
  </target>

  <!-- isolation test -->
  <target name="_jars-isolation">
     <mkdir dir="${build.lib}"/>

     <!-- build isolationA.jar -->
     <jar jarfile="${build.lib}/isolationA.jar">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/isolation/ejb/a/**"/>
         <include name="org/jboss/test/isolation/interfaces/**"/>
         <include name="org/jboss/test/util/Debug.class"/>
       </fileset>
       <fileset dir="${build.resources}/isolation/a/ejb">
         <include name="META-INF/*.xml"/>
       </fileset>
     </jar>

     <!-- build isolationB.jar -->
     <jar jarfile="${build.lib}/isolationB.jar">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/isolation/ejb/b/**"/>
         <include name="org/jboss/test/isolation/interfaces/**"/>
         <include name="org/jboss/test/util/Debug.class"/>
       </fileset>
       <fileset dir="${build.resources}/isolation/b/ejb">
         <include name="META-INF/*.xml"/>
       </fileset>
     </jar>

     <!-- build isolationA.ear -->
     <jar jarfile="${build.lib}/isolationA.ear">
       <fileset dir="${build.lib}">
         <include name="isolationA.jar"/>
       </fileset>
       <fileset dir="${build.resources}/isolation/a/ear">
         <include name="META-INF/*.xml"/>
       </fileset>
     </jar>

     <!-- build isolationB.ear -->
     <jar jarfile="${build.lib}/isolationB.ear">
       <fileset dir="${build.lib}">
         <include name="isolationB.jar"/>
       </fileset>
       <fileset dir="${build.resources}/isolation/b/ear">
         <include name="META-INF/*.xml"/>
       </fileset>
     </jar>

    <!-- build isolationC.war -->
    <war warfile="${build.lib}/isolationC.war"
	   webxml="${build.resources}/isolation/c/war/WEB-INF/web.xml">
      <webinf dir="${build.resources}/isolation/c/war">
        <include name="WEB-INF/*.xml"/>
        <exclude name="WEB-INF/web.xml"/>
      </webinf>
      <classes dir="${build.classes}">
        <include name="org/jboss/test/isolation/web/c/**"/>
      </classes>
      <classes dir="${build.resources}/isolation/c/war/WEB-INF/classes">
        <include name="**/*"/>
      </classes>
      <lib dir="${apache.log4j.lib}">
        <include name="log4j.jar"/>
      </lib>
    </war>

    <!-- build isolationC.ear -->
    <jar jarfile="${build.lib}/isolationC.ear">
      <fileset dir="${build.lib}">
        <include name="isolationC.war"/>
      </fileset>
      <fileset dir="${build.resources}/isolation/c/ear">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

   </target>

  <!-- jbossmq test -->
  <target name="_jars-jbossmq">
    <mkdir dir="${build.lib}"/>

    <!-- build jbossmqtest.jar -->
    <jar jarfile="${build.lib}/jbossmqtest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jbossmq/**"/>
      </fileset>
    </jar>
  </target>

  <!-- JbossMX tests -->
  <target name="_jars-jbossmx">
    <mkdir dir="${build.lib}"/>

    <!-- build compliance.jar -->
    <jar jarfile="${build.lib}/jbossmx-compliance.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/jbossmx/compliance/**"/>
      </fileset>
    </jar>

    <!-- build implementation.jar -->
    <jar jarfile="${build.lib}/jbossmx-implementation.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/jbossmx/implementation/**"/>
      </fileset>
    </jar>

    <!-- build performance.jar -->
    <jar jarfile="${build.lib}/jbossmx-performance.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/jbossmx/performance/**"/>
      </fileset>
    </jar>
  </target>

   <!-- jbossnet tests -->
   <target name="_jars-jbossnet">
     <mkdir dir="${build.lib}"/>

     <!-- The admindevel -->
     <jar destfile="${build.lib}/jbossnet-admindevel-ejb.jar">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/jbossnet/admindevel/**"/>
         <exclude name="org/jboss/test/jbossnet/admindevel/HelloServiceLocator.class"/>
         <exclude name="org/jboss/test/jbossnet/admindevel/HelloSoapBindingStub.class"/>
         <exclude name="org/jboss/test/jbossnet/admindevel/HelloTestCase.class"/>
       </fileset>
       <metainf dir="${build.resources}/jbossnet/admindevel/ejb/META-INF">
         <include name="ejb-jar.xml"/>
       </metainf>
     </jar>
     <jar destfile="${build.lib}/jbossnet-admindevel-ejb.wsr">
       <metainf dir="${build.resources}/jbossnet/admindevel/wsr/META-INF">
         <include name="web-service.xml"/>
       </metainf>
     </jar>
     <ear destfile="${build.lib}/jbossnet-admindevel.ear"
       appxml="${source.resources}/jbossnet/admindevel/META-INF/application.xml">
       <fileset dir="${build.lib}">
         <include name="jbossnet-admindevel-ejb.jar"/>
         <include name="jbossnet-admindevel-ejb.wsr"/>
       </fileset>
     </ear>

     <!-- The wsr.wsr -->
     <mkdir dir="${build.resources}/jbossnet/wsr/wsr/META-INF"/>
     <copy toFile="${build.resources}/jbossnet/wsr/wsr/META-INF/web-service.xml"
       file="${build.gen-src}/org/jboss/test/jbossnet/wsr/deploy.wsdd"/>

     <jar destfile="${build.lib}/wsr.wsr" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/jbossnet/wsr/**/*.class"/>
         <exclude name="**/*Test*"/>
       </fileset>
       <fileset dir="${build.resources}/jbossnet/wsr/wsr"/>
     </jar>

     <!-- The wsjmx.sar -->
     <jar destfile="${build.lib}/wsjmx.wsr" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.resources}/jbossnet/jmx/wsr">
         <include name="**/*"/>
       </fileset>
     </jar>

     <jar destfile="${build.lib}/wsjmx.sar" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.lib}">
         <include name="wsjmx.wsr"/>
       </fileset>
       <fileset dir="${source.resources}/jbossnet/jmx/sar/">
         <include name="**/*"/>
       </fileset>
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/jbossnet/jmx/server/*"/>
       </fileset>
     </jar>

     <!-- The wsejbsimple.ear -->
     <jar destfile="${build.lib}/wsejbsimple.wsr" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.resources}/jbossnet/ejbsimple/wsr">
         <include name="**/*"/>
       </fileset>
     </jar>

     <jar destfile="${build.lib}/wsejbsimple.jar" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/util/**"/>
         <include name="org/jboss/test/jbossnet/ejbsimple/**"/>
         <exclude name="org/jboss/test/jbossnet/ejbsimple/*Test*"/>
       </fileset>
       <fileset dir="${build.resources}/jbossnet/ejbsimple/ejb/">
         <include name="**/*.xml"/>
       </fileset>
     </jar>

     <jar destfile="${build.lib}/wsejbsimple.ear" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.lib}">
         <include name="wsejbsimple.wsr"/>
         <include name="wsejbsimple.jar"/>
       </fileset>
       <fileset dir="${source.resources}/jbossnet/ejbsimple/ear/">
         <include name="**"/>
       </fileset>
     </jar>

     <!-- The wsexternal wsr and ear -->
     <jar destfile="${build.lib}/wsexternal.wsr" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/jbossnet/external/google/*.class"/>
         <include name="org/jboss/test/jbossnet/external/babelfish/*.class"/>
       </fileset>
       <fileset dir="${build.resources}/jbossnet/external/wsr/">
         <include name="**/*"/>
       </fileset>
     </jar>

     <jar destfile="${build.lib}/wsexternal.jar" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/util/**"/>
         <include name="org/jboss/test/jbossnet/external/**/*.class"/>
         <exclude name="org/jboss/test/jbossnet/external/google/**/*.class"/>
         <exclude name="org/jboss/test/jbossnet/external/babelfish/**/*.class"/>
         <exclude name="org/jboss/test/jbossnet/external/*Test*"/>
       </fileset>
       <fileset dir="${build.resources}/jbossnet/external/ejb/">
         <include name="**/*"/>
       </fileset>
     </jar>

     <jar destfile="${build.lib}/wsexternal.ear" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.lib}">
         <include name="wsexternal.wsr"/>
         <include name="wsexternal.jar"/>
       </fileset>
       <fileset dir="${source.resources}/jbossnet/external/ear/">
         <include name="**/META-INF/application.xml"/>
       </fileset>
     </jar>

     <!-- build state.ear -->
     <jar jarFile="${build.lib}/wsstate.wsr" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.resources}/jbossnet/state/wsr">
         <include name="**/*"/>
       </fileset>
     </jar>

     <jar jarfile="${build.lib}/wsstate.jar" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.classes}">
         <include name="**/test/util/**"/>
         <include name="**/test/jbossnet/state/**"/>
         <exclude name="**/*Test*.*"/>
       </fileset>
       <fileset dir="${build.resources}/jbossnet/state/ejb/">
         <include name="**/*.xml"/>
       </fileset>
     </jar>

     <jar jarFile="${build.lib}/wsstate.ear" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.lib}">
         <include name="wsstate.wsr"/>
         <include name="wsstate.jar"/>
       </fileset>
       <fileset dir="${source.resources}/jbossnet/state/ear">
         <include name="**"/>
       </fileset>
     </jar>

     <!-- build security.ear -->
     <jar jarFile="${build.lib}/wssecurity.wsr" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.resources}/jbossnet/security/wsr">
         <include name="**/*"/>
       </fileset>
     </jar>

     <jar jarfile="${build.lib}/wssecurity.jar" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.classes}">
         <include name="**/test/util/**"/>
         <include name="**/test/jbossnet/security/**"/>
         <include name="**/test/security/service/SecurityConfig*.*"/>
         <exclude name="**/*TestCase*.*"/>
       </fileset>
       <fileset dir="${build.resources}/jbossnet/security/ejb/">
         <include name="**/*.xml"/>
       </fileset>
       <fileset dir="${build.resources}/jbossnet/security/server/">
         <include name="**/*.xml"/>
       </fileset>
     </jar>

     <jar jarFile="${build.lib}/wssecurity.ear" manifest="${build.etc}/manifest.mf">
       <fileset dir="${build.lib}">
         <include name="wssecurity.wsr"/>
         <include name="wssecurity.jar"/>
       </fileset>
       <fileset dir="${source.resources}/jbossnet/security/ear">
         <include name="**/*.xml"/>
       </fileset>
     </jar>

   </target>

  <!-- jca test -->
  <target name="_jars-jca">
    <mkdir dir="${build.lib}"/>

    <!-- build test jdbc driver with config inside sar -->
    <jar jarfile="${build.lib}/jbosstestdriver.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/jdbc/**"/>
      </fileset>
    </jar>


    <!-- build test adapter -->
    <jar jarfile="${build.lib}/jbosstestadapter.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/adapter/**"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/jbosstestadapter.rar">
      <fileset dir="${build.lib}">
        <include name="jbosstestadapter.jar"/>
      </fileset>
      <fileset dir="${build.resources}/jca/adapter">
        <include name="META-INF/ra.xml"/>
      </fileset>
    </jar>

    <!-- test adapter config -->
    <copy todir="${build.lib}" filtering="no">
      <fileset dir="${build.resources}/jca/adapter">
        <include name="testadapter-ds.xml"/>
      </fileset>
      <fileset dir="${build.resources}/jca/jdbc">
        <include name="testdriver-ds.xml"/>
      </fileset>
    </copy>

    <!-- build adminobject adapter -->
    <jar jarfile="${build.lib}/testadminobject.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/adminobject/**"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/testadminobject.rar">
      <fileset dir="${build.lib}">
        <include name="testadminobject.jar"/>
      </fileset>
      <fileset dir="${build.resources}/jca/adminobject">
        <include name="META-INF/ra.xml"/>
      </fileset>
    </jar>
    <copy todir="${build.lib}" filtering="no">
      <fileset dir="${build.resources}/jca/adminobject">
        <include name="*.xml"/>
      </fileset>
    </copy>

    <!-- build inflow adapter -->
    <jar jarfile="${build.lib}/jcainflow.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/inflow/**"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/jcainflow.rar">
      <fileset dir="${build.lib}">
        <include name="jcainflow.jar"/>
      </fileset>
      <fileset dir="${build.resources}/jca/inflow">
        <include name="META-INF/ra.xml"/>
      </fileset>
    </jar>

    <!-- build inflow adapter -->
    <jar jarfile="${build.lib}/jcainflowmdb.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/inflowmdb/**"/>
      </fileset>
      <fileset dir="${build.resources}/jca/inflowmdb">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <!-- build jcatest.jar -->
    <jar jarfile="${build.lib}/jcatest.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/interfaces/**"/>
        <include name="org/jboss/test/jca/ejb/**"/>
      </fileset>
      <fileset dir="${build.resources}/jca">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- build jcatest-unshared.jar -->
    <jar jarfile="${build.lib}/jcatest-unshared.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/interfaces/Unshareable**"/>
        <include name="org/jboss/test/jca/ejb/Unshareable**"/>
      </fileset>
      <fileset dir="${build.resources}/jca/ejb">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/jcabanktest.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/bank/interfaces/**"/>
        <include name="org/jboss/test/jca/bank/ejb/**"/>
      </fileset>
      <fileset dir="${build.resources}/jca/bank">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/jcaxadstest.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jca/xads/**"/>
      </fileset>
      <fileset dir="${build.resources}/jca/xads">
        <include name="*.xml"/>
      </fileset>
    </jar>

    <!--copy the plain *-service.xml files too -->
    <copy todir="${build.lib}" filtering="no">
      <fileset dir="${build.resources}/jca/autocommit">
        <include name="*.xml"/>
      </fileset>
    </copy>

  </target>

  <!-- jmsra test -->
  <target name="_jars-jmsra">
    <mkdir dir="${build.lib}"/>

    <!-- build jmsratest.jar -->
    <jar jarfile="${build.lib}/jmsratest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/jmsra/interfaces/**"/>
        <include name="org/jboss/test/jmsra/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmsra">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build jmsra.jar -->
    <jar jarfile="${build.lib}/jmsra.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/jmsra/interfaces/**"/>
        <include name="org/jboss/test/jmsra/ejb/**"/>
        <include name="org/jboss/test/jmsra/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmsra">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- jmx test -->
  <target name="_jars-jmx">
    <mkdir dir="${build.lib}"/>
    <property name="jmx-rsrc" value="${build.resources}/jmx"/>

    <!-- build jmxtest.jar -->
    <jar jarfile="${build.lib}/jmxtest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/**"/>
        <exclude name="org/jboss/test/jmx/mbean*/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx">
        <include name="test-service.xml"/>
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>

    <!--build test sar for testing sar deployment -->
    <jar jarfile="${build.lib}/testdeploy.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbean/TestDeployer**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbean">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/defaultpkg.sar">
      <metainf dir="${build.resources}/jmx/default"/>
      <fileset dir="${build.classes}">
        <include name="DefaultPkgService*"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/attrtest.sar">
      <metainf dir="${build.resources}/jmx/attrs"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/attrs/AttrTests*"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/testdeploya.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeana/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbeana">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/testdeployb.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeanb/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbeanb">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/testdeployc.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeanc/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbeanc">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>


    <jar jarfile="${build.lib}/testdeployd.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeand/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbeand">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/testdeploye-util.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeane/util/*"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/testdeploye.sar">
      <metainf dir="${build.resources}/jmx/mbeane/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeane/*"/>
      </fileset>
      <fileset dir="${build.lib}">
        <include name="testdeploye-util.jar"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/jmxproxy.sar">
      <metainf dir="${build.resources}/jmx/proxy/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/proxy/*.class"/>
      </fileset>
    </jar>

    <!-- ExternalClass ear including a sar and util jar -->
    <jar jarfile="${build.lib}/external.sar"
      manifest="${build.resources}/jmx/loading/ext/manifest.mf">
      <metainf dir="${build.resources}/jmx/loading/ext">
        <include name="jboss-service.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/ExternalClass*"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/external-util.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/util/*"/>
      </fileset>
    </jar>
    <ear earfile="${build.lib}/external.ear"
      appxml="${jmx-rsrc}/loading/ext/application.xml">
      <metainf dir="${build.resources}/jmx/loading/ext">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="external.sar"/>
        <include name="external-util.jar"/>
      </fileset>
    </ear>

    <!-- ResourceTsts case#1, a sar with the classes and resources -->
    <jar jarfile="${build.lib}/rsrc1.sar">
      <metainf dir="${build.resources}/jmx/loading/rsrc1"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/ResourceTsts*"/>
      </fileset>
    </jar>
    <!-- ResourceTsts case#2, a sar with the resources and the
      service in a nested jar
    -->
    <jar jarfile="${build.lib}/rsrcsvc.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/ResourceTsts*"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/rsrc2.sar">
      <metainf dir="${build.resources}/jmx/loading/rsrc2"/>
      <fileset dir="${build.lib}">
        <include name="rsrcsvc.jar"/>
      </fileset>
    </jar>
    <!-- ResourceTsts case#3, a jar with two sars with only
      the service descriptor metadata and a jar containing the
      service code.
    -->
    <jar jarfile="${build.lib}/rsrc31.sar">
      <metainf dir="${build.resources}/jmx/loading/rsrc1"/>
    </jar>
    <jar jarfile="${build.lib}/rsrc32.sar">
      <metainf dir="${build.resources}/jmx/loading/rsrc2"/>
    </jar>
    <jar jarfile="${build.lib}/rsrc3.jar">
      <fileset dir="${build.lib}">
        <include name="rsrcsvc.jar"/>
        <include name="rsrc31.sar"/>
        <include name="rsrc32.sar"/>
      </fileset>
    </jar>
    <!-- ResourceTsts case#4, a sar with a service descriptor with
      mulitiple mbeans, a resource file with multiple configs
      using a namespace, and the service code in a nested jar
    -->
    <jar jarfile="${build.lib}/rsrc4.sar">
      <metainf dir="${build.resources}/jmx/loading/rsrc4"/>
      <fileset dir="${build.lib}">
        <include name="rsrcsvc.jar"/>
      </fileset>
    </jar>

    <!-- Tests that a sar jboss-service.xml can include an entity ref
    -->
    <jar jarfile="${build.lib}/entityref.sar">
      <metainf dir="${build.resources}/jmx/loading/entityref"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/NoopService*"/>
      </fileset>
    </jar>

    <!--build test sar for testing local directory copy deployment -->
    <jar jarfile="${build.lib}/testcopylocaldir.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbean/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbeanlocaldir">
        <include name="META-INF/jboss-service.xml"/>
        <include name="local-directory/**"/>
      </fileset>
    </jar>
    <!--copy the plain *-service.xml files too -->
    <copy todir="${build.lib}" filtering="no">
      <fileset dir="${build.resources}/jmx">
        <include name="*.xml"/>
      </fileset>
    </copy>

    <!--build test sar for testing crash during start -->
    <jar jarfile="${build.lib}/testcrashinstart.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeancrashtest/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbeancrashtest">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <!--build sar for testing invalid Dynamic MBean that returns null MBeanInfo -->
    <jar jarfile="${build.lib}/testnullinfo.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/nullinfo/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/nullinfo">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <!--build sar containing broken deployer.  I don't know how to use this in a unit test-->
    <jar jarfile="${build.lib}/brokendeployer.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/deployer/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/deployer">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <!--just a jar, service.xml separate-->
    <jar jarfile="${build.lib}/testmbeanclassloader.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbean/TestMB**"/>
      </fileset>
    </jar>

    <!--eardeployment, 2 jars of 1 session bean each-->
    <!--IMPORTANT!! this test relies on the dd's being in the "wrong" jar -->
    <!--the point of the test is to see if the classes in one jar are visible to
      the deployment descriptors of the other jar -->
    <jar jarfile="${build.lib}/sessiona.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/eardeployment/a/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardeployment/b/">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/sessionb.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/eardeployment/b/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardeployment/a/">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/eardeployment.ear">
      <fileset dir="${build.lib}">
        <include name="sessiona.jar"/>
        <include name="sessionb.jar"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardeployment/">
        <include name="META-INF/application.xml"/>
      </fileset>
    </jar>

    <!-- eardepends test -->
    <jar jarfile="${build.lib}/eardependsaejb.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/eardepends/dependent/ejb/*.class"/>
        <include name="org/jboss/test/jmx/eardepends/dependent/interfaces/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardepends/dependent">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/eardependsbejb.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/eardepends/independent/ejb/*.class"/>
        <include name="org/jboss/test/jmx/eardepends/independent/interfaces/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardepends/independent">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/eardependsmbean.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/eardepends/mbean/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardepends/mbean">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/eardepends.ear">
      <fileset dir="${build.lib}">
        <include name="eardependsaejb.jar"/>
        <include name="eardependsbejb.jar"/>
        <include name="eardependsmbean.sar"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardepends/app">
        <include name="META-INF/application.xml"/>
        <include name="META-INF/jboss-app.xml"/>
      </fileset>
    </jar>

    <!-- Unpackaged ear test -->
    <mkdir dir="${build.lib}/unpacked/eardeployment.ear/META-INF"/>
    <copy file="${build.resources}/jmx/eardeployment/META-INF/application.xml"
      todir="${build.lib}/unpacked/eardeployment.ear/META-INF"/>
    <unjar src="${build.lib}/sessiona.jar"
      dest="${build.lib}/unpacked/eardeployment.ear/sessiona.jar"/>
    <unjar src="${build.lib}/sessionb.jar"
      dest="${build.lib}/unpacked/eardeployment.ear/sessionb.jar"/>

    <!-- cpmanifest test -->
    <jar jarfile="${build.lib}/abstract.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/Abstract*"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/concrete.jar"
      manifest="${build.resources}/jmx/loading/cpmanifest/META-INF/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/Concrete*"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/loading/cpmanifest/">
        <include name="META-INF/ejb-jar.xml"/>
      </fileset>
    </jar>
    <ear earfile="${build.lib}/cpmanifest.ear"
      appxml="${jmx-rsrc}/loading/cpmanifest/META-INF/application.xml">
      <fileset dir="${build.lib}">
        <include name="abstract.jar"/>
        <include name="concrete.jar"/>
      </fileset>
    </ear>

    <!-- cpcircular-manifest test -->
    <jar jarfile="${build.lib}/abstract2.jar"
      manifest="${jmx-rsrc}/loading/cpmanifest/META-INF/a2cmanifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/Abstract*"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/concrete2.jar"
      manifest="${jmx-rsrc}/loading/cpmanifest/META-INF/c2amanifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/loading/Concrete*"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/loading/cpmanifest/">
        <include name="META-INF/ejb-jar.xml"/>
      </fileset>
    </jar>
    <ear earfile="${build.lib}/cpcircular-manifest.ear"
      appxml="${jmx-rsrc}/loading/cpmanifest/META-INF/application-circular.xml">
      <fileset dir="${build.lib}">
        <include name="abstract2.jar"/>
        <include name="concrete2.jar"/>
      </fileset>
    </ear>

    <!-- cpejbs-manifest test -->
    <jar jarfile="${build.lib}/ejbjar1.jar"
      manifest="${jmx-rsrc}/loading/cpmanifest/META-INF/ejbjar1.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/eardeployment/a/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardeployment/a/">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/ejbjar2.jar"
      manifest="${jmx-rsrc}/loading/cpmanifest/META-INF/ejbjar2.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/eardeployment/b/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/eardeployment/b/">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>
    <ear earfile="${build.lib}/cpejbs-manifest.ear"
      appxml="${jmx-rsrc}/loading/cpmanifest/META-INF/application-ejbs.xml">
      <fileset dir="${build.lib}">
        <include name="ejbjar1.jar"/>
        <include name="ejbjar2.jar"/>
      </fileset>
    </ear>

    <!-- jar in sar with jsr-77 mbeans -->
    <jar jarfile="${build.lib}/jarinsar.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/ejb/TestDataSourceBean.class"/>
        <include name="org/jboss/test/jmx/interfaces/TestDataSource*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx">
        <include name="META-INF/ejb-jar.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/jarinsar.sar">
      <fileset dir="${build.lib}">
        <include name="jarinsar.jar"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/mbeana/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/mbeana">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>

    <!--package with external jndi dependencies, for undeploy of broken package-->
    <jar jarfile="${build.lib}/undeploybroken.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/ejb/Entity*.class"/>
        <include name="org/jboss/test/jmx/interfaces/Entity*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/undeploy">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- EJB jars used by UndeployBrokenPackageUnitTestCase -->
    <jar jarfile="${build.lib}/ejbredeploy-bad.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/ejb/EntityABean.class"/>
        <include name="org/jboss/test/jmx/interfaces/EntityA*.class"/>
      </fileset>
      <metainf dir="${source.resources}/jmx/undeploy/bad-inf"/>
    </jar>
    <jar jarfile="${build.lib}/ejbredeploy-good.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/ejb/EntityABean.class"/>
        <include name="org/jboss/test/jmx/interfaces/EntityA*.class"/>
      </fileset>
      <metainf dir="${source.resources}/jmx/undeploy/good-inf"/>
    </jar>

    <!--xmbean test deployment-->
    <jar jarfile="${build.lib}/user-xmbean.sar">
      <metainf dir="${build.resources}/jmx/xmbean/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/xmbean/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/xmbean">
        <include name="**/User.xml"/>
      </fileset>
    </jar>

    <!--xmbean embedded dd tests -->
    <jar jarfile="${build.lib}/user2-xmbean-embedded.sar">
      <metainf dir="${build.resources}/jmx/xmbean/embedded"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/xmbean/User2.class"/>
        <include name="org/jboss/test/jmx/xmbean/CustomType*.class"/>
      </fileset>
    </jar>
    <!--xmbean persistence tests -->
    <jar jarfile="${build.lib}/user2-xmbean.sar">
      <metainf dir="${build.resources}/jmx/xmbean/user2"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/xmbean/User2.class"/>
        <include name="org/jboss/test/jmx/xmbean/XMLFilePersistenceManager.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/user3-xmbean.sar">
      <metainf dir="${build.resources}/jmx/xmbean/user2"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/xmbean/User2.class"/>
        <include name="org/jboss/test/jmx/xmbean/XMLFilePersistenceManager.class"/>
      </fileset>
    </jar>
    <copy todir="${build.lib}">
      <fileset dir="${build.resources}/jmx/xmbean">
        <include name="RemoveUser2Store.bsh"/>
        <include name="RemoveUser3Store.bsh"/>
      </fileset>
    </copy>

    <!-- xmbean AVC generation from wrapped standard mbean impl -->
    <jar jarfile="${build.lib}/listener-xmbean.sar">
      <metainf dir="${build.resources}/jmx/xmbean/listener/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/xmbean/SelfListenerService.class"/>
      </fileset>
    </jar>

    <!-- Tests of xmbeans with custom interceptors -->
    <jar jarfile="${build.lib}/interceptors-xmbean.sar">
      <metainf dir="${build.resources}/jmx/interceptors">
        <include name="jboss-service.xml"/>
        <include name="secured-xmbean.xml"/>
        <include name="naming-xmbean.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/interceptors/*.class"/>
      </fileset>
      <fileset dir="${build.resources}">
        <include name="jmx/interceptors/*.properties"/>
        <include name="jmx/interceptors/security-config.xml"/>
        <include name="jmx/interceptors/scripts/*"/>
      </fileset>
    </jar>

    <!-- Compile the rmi jmx listener stub -->
    <rmic base="${build.classes}"
      sourcebase="${build.classes}"
      verify="${rmic.verify}"
      iiop="${rmic.iiop}"
      iiopopts="${rmic.iiopops}"
      idl="${rmic.idl}"
      idlopts="${rmic.idlops}"
      debug="${rmic.debug}"
      stubVersion="${rmic.stubVersion}"
      >
      <classpath refid="tests.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>
      <include name="org/jboss/test/jmx/invoker/Listener.class"/>
    </rmic>

    <!-- ha-invoker adaptor sar -->
    <jar jarfile="${build.lib}/ha-invoker.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/ha/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/ha/">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- invoker adaptor test sar -->
    <jar jarfile="${build.lib}/invoker-adaptor-test.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/invoker/*.class"/>
        <include name="org/jboss/test/jmx/interceptors/PrincipalInterceptor.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/invoker/sar">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- invoker adaptor test ear -->
    <jar jarfile="${build.lib}/invoker-adaptor-test.ear">
      <fileset dir="${build.lib}">
        <include name="invoker-adaptor-test.sar"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/invoker/ear">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/invoker-proxy-test.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/invokerproxy/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/invokerproxy">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <property environment="env"/>
    <property name="win32.drive" value="${env.SYSTEMDRIVE}" />
    <pathconvert targetos="unix" property="codebaseURL">
      <map from="${win32.drive}" to=""/>
      <path path="${build.lib}"/>
    </pathconvert>
    <echo message="+++ codebase=${codebaseURL}"/>
    <echo message="+++ build.lib=${build.lib}"/>
    <copy todir="${build.lib}" filtering="true" overwrite="true"
      file="${source.resources}/jmx/archivestest-service.xml">
      <filterset>
        <filter token="codebase" value="file://${codebaseURL}"/>
      </filterset>
    </copy>

    <!-- internal test sar -->
    <jar jarfile="${build.lib}/jmx-nointernal.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/internal/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/internal">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- explicit standard interface sar -->
    <jar jarfile="${build.lib}/explicit-standard-interface.sar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jmx/standard/**"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/standard">
        <include name="META-INF/jboss-service.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- jrmp test -->
  <target name="_jars-jrmp">
    <mkdir dir="${build.lib}"/>

    <!-- build jrmp-comp-client.jar -->
    <jar jarfile="${build.lib}/jrmp-comp-client.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jrmp/interfaces/**"/>
      </fileset>
    </jar>

    <!-- build comp-client.jar -->
    <jar jarfile="${build.lib}/comp-client.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jrmp/ejb/Compression*.class"/>
      </fileset>
    </jar>

    <!-- build jrmp-comp.jar -->
    <jar jarfile="${build.lib}/jrmp-comp.sar">
      <metainf dir="${build.resources}/jrmp/service-inf"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jrmp/ejb/Compression*.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/jrmp-comp.jar">
      <metainf dir="${build.resources}/jrmp/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jrmp/interfaces/**"/>
        <include name="org/jboss/test/jrmp/ejb/**"/>
      </fileset>
      <fileset dir="${build.lib}">
        <include name="jrmp-comp.sar"/>
      </fileset>
    </jar>

    <!-- build jrmp-dl-client.jar -->
    <jar jarfile="${build.lib}/jrmp-dl-client.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/jrmp/interfaces/**"/>
        <include name="org/jboss/test/jrmp/test/DynLoading*.class"/>
        <include name="org/jboss/test/JBossTestCase.class"/>
        <include name="org/jboss/test/JBossTestServices.class"/>
        <include name="org/jboss/test/util/LoggingRMIClassLoader.class"/>
      </fileset>
    </jar>

    <!-- build jrmp-dl.jar -->
    <jar jarfile="${build.lib}/jrmp-dl.jar">
      <metainf dir="${build.resources}/jrmp/META-INF">
        <exclude name="jboss.xml"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/jrmp/interfaces/**"/>
        <include name="org/jboss/test/jrmp/ejb/**"/>
      </fileset>
    </jar>
  </target>

  <!-- jsr77 test -->
  <target name="_jars-jsr77">
    <mkdir dir="${build.lib}"/>

    <!-- Copy the ejb connector -->
    <copy file="${jboss.management.lib}/ejb-management.jar"
      todir="${build.lib}"/>
  </target>

  <!-- load test -->
  <target name="_jars-load">
    <mkdir dir="${build.lib}"/>

    <!-- build loadtest.jar -->
    <jar jarfile="${build.lib}/load.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/load/test/**"/>
        <include name="org/jboss/test/testbean/interfaces/**"/>
        <include name="org/jboss/test/bmp/interfaces/**"/>
      </fileset>
    </jar>
  </target>

  <!-- lock test -->
  <target name="_jars-lock">
    <mkdir dir="${build.lib}"/>

    <!-- build locktestclient.jar -->
    <jar jarfile="${build.lib}/locktestclient.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/lock/interfaces/**"/>
        <include name="org/jboss/test/lock/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/lock">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build locktest.jar -->
    <jar jarfile="${build.lib}/locktest.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/lock/interfaces/**"/>
        <include name="org/jboss/test/lock/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/lock">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- marathon test -->
  <target name="_jars-marathon">
    <mkdir dir="${build.lib}"/>

    <!-- build marathon.jar -->
    <jar jarfile="${build.lib}/marathon.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/marathon/**"/>
      </fileset>
    </jar>
  </target>

  <!-- mdb test -->
  <target name="_jars-mdb">
    <mkdir dir="${build.lib}"/>

    <!-- build mdbtest.jar -->
    <jar jarfile="${build.lib}/mdbtest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/mdb/bean/**"/>
        <include name="org/jboss/test/mdb/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/mdb">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build mdb.jar -->
    <jar jarfile="${build.lib}/mdb.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/mdb/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/mdb">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- messagedriven test -->
  <target name="_jars-messagedriven">
    <mkdir dir="${build.lib}"/>

    <!-- build mdbqueuexa.jar -->
    <jar jarfile="${build.lib}/mdbqueuexa.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/messagedriven/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/messagedriven/queuexa">
        <include name="**/*.xml"/>
      </fileset>
      <fileset dir="${build.resources}/messagedriven">
        <include name="jboss-service.xml"/>
      </fileset>
    </jar>

    <!-- build mdbtopicxa.jar -->
    <jar jarfile="${build.lib}/mdbtopicxa.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/messagedriven/beans/**"/>
      </fileset>
      <fileset dir="${build.resources}/messagedriven/topicxa">
        <include name="**/*.xml"/>
      </fileset>
      <fileset dir="${build.resources}/messagedriven">
        <include name="jboss-service.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- naming test -->
  <target name="_jars-naming">
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.lib}/subdir"/>

    <!-- build naming.jar -->
    <jar jarfile="${build.lib}/naming.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/naming/ejb/**"/>
        <include name="org/jboss/test/naming/interfaces/**"/>
        <include name="org/jboss/test/util/Debug.class"/>
        <include name="org/jboss/test/util/ejb/*"/>
      </fileset>
      <fileset dir="${build.resources}/naming">
        <include name="JndiConfig.bsh"/>
      </fileset>
      <zipfileset src="${junit.junit.lib}/junit.jar"
        includes="junit/framework/*.*,junit/runner/*.*"/>
      <fileset dir="${build.resources}/naming/jar">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- build remote-naming.jar -->
    <jar jarfile="${build.lib}/remote-naming.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/naming/ejb/**"/>
        <include name="org/jboss/test/naming/interfaces/**"/>
        <include name="org/jboss/test/util/Debug.class"/>
      </fileset>
      <fileset dir="${build.resources}/remote-naming">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <!-- build naminga.jar -->
    <jar jarfile="${build.lib}/subdir/naminga.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/naming/ejb/**"/>
        <include name="org/jboss/test/naming/interfaces/**"/>
        <include name="org/jboss/test/util/Debug.class"/>
      </fileset>
      <fileset dir="${build.resources}/naming/ear/a">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- build namingb.jar -->
    <jar jarfile="${build.lib}/namingb.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/naming/ejb/**"/>
        <include name="org/jboss/test/naming/interfaces/**"/>
        <include name="org/jboss/test/util/Debug.class"/>
      </fileset>
      <fileset dir="${build.resources}/naming/ear/b">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <!-- build naming.ear -->
    <jar jarfile="${build.lib}/naming.ear">
      <fileset dir="${build.lib}">
        <include name="subdir/naminga.jar"/>
        <include name="namingb.jar"/>
      </fileset>
      <fileset dir="${build.resources}/naming/ear">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>

    <jar destfile="${build.lib}/naming-readonly.sar">
      <metainf dir="${build.resources}/naming/services">
        <include name="jboss-service.xml"/>
      </metainf>
      <fileset dir="${build.resources}/naming/services">
        <include name="naming-xmbean.xml"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/naming/interceptors/*"/>
      </fileset>
    </jar>
  </target>

  <!-- perf test -->
  <target name="_jars-perf">
    <mkdir dir="${build.lib}"/>

    <!-- build perftest.jar -->
    <jar jarfile="${build.lib}/perftest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/perf/interfaces/**"/>
        <include name="org/jboss/test/perf/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/perf">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build perf.jar -->
    <jar jarfile="${build.lib}/perf.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/perf/interfaces/**"/>
        <include name="org/jboss/test/perf/ejb/**"/>
      </fileset>
      <metainf dir="${build.resources}/perf/META-INF">
        <exclude name="jboss-service.xml"/>
      </metainf>
    </jar>
    <!-- build probe.jar -->
    <jar jarfile="${build.lib}/probe.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/perf/interfaces/Perf*"/>
        <include name="org/jboss/test/perf/interfaces/Probe*"/>
        <include name="org/jboss/test/perf/ejb/Perf*"/>
        <include name="org/jboss/test/perf/ejb/Probe*"/>
        <include name="org/jboss/test/util/Debug.class"/>
      </fileset>
      <metainf dir="${build.resources}/perf/probe">
        <exclude name="jboss-service.xml"/>
      </metainf>
    </jar>

    <!-- build secure-perf.jar -->
    <jar jarfile="${build.lib}/secure-perf.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/perf/interfaces/**"/>
        <include name="org/jboss/test/perf/ejb/**"/>
      </fileset>
      <metainf dir="${build.resources}/secure-perf/META-INF"/>
      <fileset dir="${build.resources}/secure-perf">
        <include name="users.properties"/>
        <include name="roles.properties"/>
      </fileset>
    </jar>

    <!-- build the perf-service.sar -->
    <jar jarfile="${build.lib}/perf-service.sar">
      <!-- jboss-service.xml for tomcat plugin -->
      <metainf dir="${build.resources}/perf">
        <include name="jboss-service.xml"/>
      </metainf>
      <!-- The service classes -->
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/perf/test/PerfTest.class"/>
        <include name="org/jboss/test/perf/test/PerfTestMBean.class"/>
      </fileset>
      <!-- The perf.jar -->
      <fileset dir="${build.lib}">
        <include name="perf.jar"/>
      </fileset>
    </jar>

    <!-- build the perf-service2.sar, does not include perf.jar -->
    <jar jarfile="${build.lib}/perf-service2.sar">
      <!-- jboss-service.xml for tomcat plugin -->
      <metainf dir="${build.resources}/perf">
        <include name="jboss-service.xml"/>
      </metainf>
      <!-- The service classes -->
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/perf/test/PerfTest.class"/>
        <include name="org/jboss/test/perf/test/PerfTestMBean.class"/>
      </fileset>
    </jar>

    <!-- The perf-service ear -->
    <ear earfile="${build.lib}/perf-service.ear"
      appxml="${build.resources}/perf/application.xml">
      <fileset dir="${build.lib}">
        <include name="perf.jar"/>
        <include name="perf-service2.sar"/>
      </fileset>
    </ear>
  </target>

  <!-- pooled test -->
  <target name="_jars-pooled">
    <mkdir dir="${build.lib}"/>

    <!-- build pooledtest.jar -->
    <jar jarfile="${build.lib}/pooledtest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/pooled/interfaces/**"/>
        <include name="org/jboss/test/pooled/test/**"/>
        <include name="org/somepackage/**"/>
      </fileset>
      <fileset dir="${build.resources}/pooled">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build pooled.jar -->
    <jar jarfile="${build.lib}/pooled.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/pooled/interfaces/**"/>
        <include name="org/jboss/test/pooled/bean/**"/>
        <include name="org/somepackage/**"/>
      </fileset>
      <fileset dir="${build.resources}/pooled">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

  </target>

  <!-- proxy compiler tests -->
  <target name="_jars-proxycompiler">
    <mkdir dir="${build.lib}"/>

    <!-- build ejbconf-test.jar -->
    <jar jarfile="${build.lib}/proxycompiler-test.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/proxycompiler/beans/**"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/proxycompiler/*"/>
      </fileset>
      <fileset dir="${build.resources}/proxycompiler/">
        <include name="META-INF/*"/>
      </fileset>
    </jar>

  </target>

  <!-- readahead test -->
  <target name="_jars-readahead">
    <mkdir dir="${build.lib}"/>

    <!-- build readaheadtest.jar -->
    <jar jarfile="${build.lib}/readaheadtest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/readahead/interfaces/**"/>
        <include name="org/jboss/test/readahead/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/readahead">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build readahead.jar -->
    <jar jarfile="${build.lib}/readahead.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/readahead/interfaces/**"/>
        <include name="org/jboss/test/readahead/ejb/**"/>
      </fileset>
      <fileset dir="${build.resources}/readahead">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <target name="_jars-retry">
    <mkdir dir="${build.lib}"/>

    <!-- build retry.jar -->
    <jar jarfile="${build.lib}/retrytest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/retry/interfaces/**"/>
        <include name="org/jboss/test/retry/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/retry">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build retry.jar -->
    <jar jarfile="${build.lib}/retry.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/retry/interfaces/**"/>
        <include name="org/jboss/test/retry/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/retry">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- security test -->
  <target name="_jars-security">
    <mkdir dir="${build.lib}"/>

    <!-- build security-spec.jar -->
    <jar jarfile="${build.lib}/security-spec.sar">
      <metainf dir="${build.resources}/security-spec/service-inf"/>
      <fileset dir="${build.resources}/security">
        <include name="tst.keystore"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/security/service/SecurityConfig*.class"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/security-spec.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/security/interfaces/**"/>
        <include name="org/jboss/test/security/ejb/**"/>
        <include name="org/jboss/test/security/test/Namespace*"/>
        <include name="org/jboss/test/security/test/PermissionName*"/>
      </fileset>
      <fileset dir="${build.resources}/security-spec">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
        <include name="users.properties"/>
        <include name="roles.properties"/>
      </fileset>
      <fileset dir="${build.lib}">
        <include name="security-spec.sar"/>
      </fileset>
    </jar>

    <!-- build security-srp.jar and security-srp.sar -->
    <jar jarfile="${build.lib}/security-srp.sar">
      <metainf dir="${build.resources}/security-srp/service-inf"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/security/service/PropertiesVerifierStore*.class"/>
        <include name="org/jboss/test/security/service/SecurityConfig*.class"/>
        <include name="org/jboss/test/security/service/SRPCache*.class"/>
        <include name="org/jboss/test/security/interceptors/**"/>
      </fileset>
      <fileset dir="${build.resources}/security-srp">
        <include name="users.properties"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/security-srp.jar">
      <metainf dir="${build.resources}/security-srp/ejb-inf"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/security/ejb/StatelessSessionBean.class"/>
        <include name="org/jboss/test/security/interfaces/StatelessSession*"/>
      </fileset>
      <fileset dir="${build.resources}/security-srp">
        <include name="users.properties"/>
        <include name="roles.properties"/>
      </fileset>
      <fileset dir="${build.lib}">
        <include name="security-srp.sar"/>
      </fileset>
    </jar>

    <!-- build https-service.sar -->
    <jar jarfile="${build.lib}/https-service.sar">
      <metainf dir="${build.resources}/security/https-service"/>
      <metainf dir="${build.resources}/security">
        <include name="tst.keystore"/>
      </metainf>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/security/service/Https*.class"/>
      </fileset>
    </jar>

    <!-- build security-proxy.jar -->
    <jar jarfile="${build.lib}/security-proxy.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/security/ejb/IOStatelessSessionBean.class"/>
        <include name="org/jboss/test/security/ejb/IOStatefulSessionBean.class"/>
        <include name="org/jboss/test/security/interfaces/IOSession.class"/>
        <include name="org/jboss/test/security/interfaces/IOSessionHome.class"/>
        <include name="org/jboss/test/security/interfaces/ReadAccessException.class"/>
        <include name="org/jboss/test/security/proxy/SessionSecurityProxy.class"/>
      </fileset>
      <fileset dir="${build.resources}/security-proxy">
        <include name="*.properties"/>
      </fileset>
      <metainf dir="${build.resources}/security-proxy/META-INF"/>
    </jar>

    <!-- build securitymgr-ejb.jar -->
    <jar jarfile="${build.lib}/securitymgr-ejb.jar">
      <metainf dir="${build.resources}/securitymgr/META-INF"/>
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/securitymgr/ejb/**"/>
        <include name="org/jboss/test/securitymgr/interfaces/**"/>
      </fileset>
    </jar>

    <!-- build securitymgr-tests.jar -->
    <jar jarfile="${build.lib}/securitymgr-tests.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/*.class"/>
        <include name="org/jboss/test/securitymgr/test/**"/>
      </fileset>
    </jar>

    <!-- build security-jaas.jar -->
    <jar jarfile="${build.lib}/security-jaas.sar">
      <metainf dir="${build.resources}/security/service-inf"/>
    </jar>
    <war warfile="${build.lib}/security-jaas.war"
      webxml="${build.resources}/security/WEB-INF/jaas-web.xml">
      <webinf dir="${build.resources}/security/WEB-INF">
        <include name="jboss-web.xml"/>
      </webinf>
      <classes dir="${build.classes}">
        <include name="org/jboss/test/security/servlets/**"/>
      </classes>
    </war>
    <jar jarfile="${build.lib}/security-jaas.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/security/interfaces/CustomPrincipal*"/>
        <include name="org/jboss/test/security/ejb/CustomPrincipal*"/>
      </fileset>
      <fileset dir="${build.resources}/security">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/jboss.xml"/>
      </fileset>
    </jar>
    <ear earfile="${build.lib}/security-jaas.ear"
      appxml="${build.resources}/security/META-INF/application-jaas.xml">
      <metainf dir="${build.resources}/security/META-INF">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="security-jaas.jar"/>
        <include name="security-jaas.sar"/>
        <include name="security-jaas.war"/>
      </fileset>
      <zipfileset dir="${build.resources}/security" prefix="security">
        <include name="roles.properties"/>
        <include name="users.properties"/>
      </zipfileset>
    </ear>
  </target>

  <!-- testbean test -->
  <target name="_jars-testbean">
    <mkdir dir="${build.lib}"/>

    <!-- build testbeantest.jar -->
    <jar jarfile="${build.lib}/testbeantest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/testbean/interfaces/**"/>
        <include name="org/jboss/test/testbean/test/**"/>
        <include name="org/jboss/test/testbean2/interfaces/**"/>
        <include name="org/somepackage/**"/>
        <include name="org/jboss/test/bmp/interfaces/**"/>
      </fileset>
      <fileset dir="${build.resources}/testbean">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build testbean.jar -->
    <jar jarfile="${build.lib}/testbean.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/testbean/interfaces/**"/>
        <include name="org/jboss/test/testbean/bean/**"/>
        <!--include name="org/jboss/test/testbean2/interfaces/**"/-->
        <include name="org/somepackage/**"/>
      </fileset>
      <fileset dir="${build.resources}/testbean">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <!-- build testbean2.jar -->
    <jar jarfile="${build.lib}/testbean2.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/testbean/interfaces/**"/>
        <include name="org/jboss/test/testbean2/interfaces/**"/>
        <include name="org/jboss/test/testbean2/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/testbean2">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- testbeancluster test -->
  <target name="_jars-testbeancluster" depends="_jars-testbean">
    <mkdir dir="${build.lib}"/>

    <!-- build testbeancluster.jar -->
    <jar jarfile="${build.lib}/testbeancluster.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/testbean/interfaces/**"/>
        <include name="org/jboss/test/testbeancluster/interfaces/**"/>
        <include name="org/jboss/test/testbean/bean/**"/>
        <include name="org/jboss/test/testbeancluster/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/testbeancluster">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

	<!-- httpsessionreplication test -->
	  <target name="_jars-httpsessionreplication">
	    <mkdir dir="${build.lib}"/>

	    <!-- build httpsessionreplication.jar -->
	    <jar jarfile="${build.lib}/httpsessionreplication.jar">
	    	<!--
	      <fileset dir="${build.classes}">
	        <patternset refid="jboss.test.util.ejb.set"/>
	        <include name="org/jboss/test/testbean/interfaces/**"/>
	        <include name="org/jboss/test/testbeancluster/interfaces/**"/>
	        <include name="org/jboss/test/testbean/bean/**"/>
	        <include name="org/jboss/test/testbeancluster/bean/**"/>
	      </fileset>
	      -->
	      <fileset dir="${build.resources}/cluster">
	        <include name="**/*.xml"/>
	      </fileset>
	    </jar>
	  </target>

  <!-- threading test -->
  <target name="_jars-threading">
    <mkdir dir="${build.lib}"/>

    <!-- build threadingMBean.jar -->
    <jar jarfile="${build.lib}/threadingMBean.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/threading/interfaces/**"/>
        <include name="org/jboss/test/threading/mbean/**"/>
      </fileset>
      <fileset dir="${build.resources}/threading">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build threadingBean.jar -->
    <jar jarfile="${build.lib}/threadingBean.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/threading/interfaces/**"/>
        <include name="org/jboss/test/threading/ejb/**"/>
      </fileset>
      <fileset dir="${build.resources}/threading">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- EJB Timer Service test -->
  <target name="_jars-timer">
    <!-- build session-bean-timer.jar -->
    <jar jarfile="${build.lib}/ejb-timer.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/timer/ejb/**"/>
        <include name="org/jboss/test/timer/interfaces/**"/>
        <include name="META-INF/**"/>
      </fileset>
      <fileset dir="${build.resources}/timer/">
        <include name="META-INF/**"/>
      </fileset>
    </jar>
  </target>

  <!-- transaction test -->
  <target name="_jars-tm">
    <mkdir dir="${build.lib}"/>

    <!-- build tmtest.sar -->
    <jar destfile="${build.lib}/tmtest.sar">
      <metainf dir="${build.resources}/tm/mbean">
         <include name="jboss-service.xml" />
      </metainf>
      <fileset dir="${build.classes}">
       <include name="org/jboss/test/tm/mbean/**"/>
       <include name="org/jboss/test/tm/resource/**"/>
      </fileset>
    </jar>

    <!-- build txtimeouttest.jar -->
    <jar destfile="${build.lib}/txtimeouttest.jar">
      <metainf dir="${build.resources}/tm/txtimeout">
         <include name="*.xml" />
      </metainf>
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
      	<include name="org/jboss/test/tm/ejb/**"/>
        <include name="org/jboss/test/tm/interfaces/**"/>
      </fileset>
    </jar>
  </target>

  <!-- txiiop test -->
  <target name="_jars-txiiop">
    <mkdir dir="${build.lib}"/>

    <!-- build txiioptest.jar -->
    <jar jarfile="${build.lib}/txiioptest.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/txiiop/interfaces/**"/>
        <include name="org/jboss/test/txiiop/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/txiiop">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build txiiop.jar -->
    <jar jarfile="${build.lib}/txiiop.jar">
      <metainf dir="${build.resources}/txiiop/META-INF"/>
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/txiiop/interfaces/**"/>
        <include name="org/jboss/test/txiiop/ejb/**"/>
      </fileset>
    </jar>
  </target>

  <!-- tx propogation test -->
  <target name="_jars-txpropiiop">
     <mkdir dir="${build.lib}"/>

     <rmic base="${build.classes}"
       verify="true"
       iiop="true"
       debug="true"
     >
       <classpath refid="tests.classpath"/>
       <include name="org/jboss/test/txpropiiop/interfaces/a/SessionAHome.class"/>
       <include name="org/jboss/test/txpropiiop/interfaces/a/SessionA.class"/>
       <include name="org/jboss/test/txpropiiop/interfaces/b/SessionBHome.class"/>
       <include name="org/jboss/test/txpropiiop/interfaces/b/SessionB.class"/>
     </rmic>

     <jar jarfile="${build.lib}/txpropiiopA.jar">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/txpropiiop/ejb/a/**"/>
         <include name="org/jboss/test/txpropiiop/interfaces/**"/>
         <include name="org/jboss/test/util/Debug.class"/>
       </fileset>
       <fileset dir="${build.resources}/txpropiiop/a">
         <include name="META-INF/*.xml"/>
       </fileset>
     </jar>

     <jar jarfile="${build.lib}/txpropiiopB.jar">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/txpropiiop/ejb/b/**"/>
         <include name="org/jboss/test/txpropiiop/interfaces/**"/>
         <include name="org/jboss/test/util/Debug.class"/>
       </fileset>
       <fileset dir="${build.resources}/txpropiiop/b">
         <include name="META-INF/*.xml"/>
       </fileset>
     </jar>

   </target>

  <!-- EJB Tx Timer Service test -->
  <target name="_jars-txtimer">
    <!-- build session-bean-timer.jar -->
    <jar jarfile="${build.lib}/ejb-txtimer.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/txtimer/ejb/**"/>
        <include name="org/jboss/test/txtimer/interfaces/**"/>
        <include name="META-INF/**"/>
      </fileset>
      <fileset dir="${build.resources}/txtimer/">
        <include name="META-INF/**"/>
      </fileset>
    </jar>
  </target>

  <!-- Utility services tests -->
  <target name="_jars-util">
    <!-- The external scheduler.jar -->
    <jar destfile="${build.lib}/scheduler.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/util/scheduler/*"/>
      </fileset>
    </jar>
    <!-- The scheduler.sar -->
    <jar destfile="${build.lib}/scheduler.sar">
      <manifest>
        <attribute name="Class-Path" value="../../scheduler.jar"/>
      </manifest>
      <metainf dir="${build.resources}/util/scheduler">
        <include name="jboss-service.xml"/>
      </metainf>
    </jar>
    <!-- The scheduler.ear -->
    <ear destfile="${build.lib}/scheduler.ear"
      appxml="${build.resources}/util/scheduler/application.xml">
      <metainf dir="${build.resources}/util/scheduler">
        <include name="jboss-app.xml"/>
      </metainf>
      <fileset dir="${build.lib}">
        <include name="scheduler.sar"/>
      </fileset>
    </ear>
  </target>

   <!-- web test -->
   <target name="_jars-web" depends="_jars-cts">
     <mkdir dir="${build.lib}"/>

     <!-- build jbosstest-web-ejbs.jar -->
     <jar jarfile="${build.lib}/jbosstest-web-ejbs.jar"
       manifest="${build.resources}/web/ejb.mf">
       <fileset dir="${build.classes}">
         <patternset refid="jboss.test.util.ejb.set"/>
         <include name="org/jboss/test/web/interfaces/**"/>
         <include name="org/jboss/test/web/ejb/**"/>
       </fileset>
       <fileset dir="${build.resources}/web">
         <include name="META-INF/ejb-jar.xml"/>
         <include name="META-INF/jboss.xml"/>
         <include name="users.properties"/>
         <include name="roles.properties"/>
       </fileset>
     </jar>

     <!-- build jbosstest-web-util.jar -->
     <jar jarfile="${build.lib}/jbosstest-web-util.jar">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/web/util/**"/>
         <exclude name="org/jboss/test/web/util/ClassInClasses.class"/>
         <exclude name="org/jboss/test/web/util/EJBManifestClass.class"/>
       </fileset>
     </jar>
     <mkdir dir="${build.lib}/lib"/>
     <jar jarfile="${build.lib}/lib/util.jar">
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/util/Debug.class"/>
         <include name="org/jboss/test/web/util/EJBManifestClass.class"/>
       </fileset>
     </jar>

     <!-- build websubdir/relative.jar -->
     <mkdir dir="${build.lib}/websubdir"/>
     <jar jarfile="${build.lib}/websubdir/relative.jar">
       <fileset dir="${build.resources}/web/websubdir">
         <include name="**/*.xml"/>
       </fileset>
       <fileset dir="${build.classes}">
         <include name="org/jboss/test/web/ejb/StatelessSessionBean.class"/>
         <include name="org/jboss/test/web/interfaces/StatelessSession*.class"/>
       </fileset>
     </jar>

     <!-- Build manifest-web.war -->
     <manifest file="${build.resources}/manifest-web.mf">
       <attribute name="Class-Path" value="jbosstest-web-util.jar"/>
     </manifest>
     <war warfile="${build.lib}/manifest-web.war"
       manifest="${build.resources}/manifest-web.mf"
       webxml="${build.resources}/web/WEB-INF/manifest-web.xml">
       <fileset dir="${build.resources}/web/html/manifest">
         <include name="**/*.jsp"/>
       </fileset>
       <fileset dir="${build.lib}">
         <include name="jbosstest-web-util.jar"/>
       </fileset>
     </war>
     <ear earfile="${build.lib}/manifest-web.ear"
       appxml="${build.resources}/web/META-INF/application-mf.xml">
       <fileset dir="${build.lib}">
         <include name="manifest-web.war"/>
         <include name="jbosstest-web-util.jar"/>
       </fileset>
     </ear>

     <!-- build root-web.war -->
     <war warfile="${build.lib}/root-web.war"
       webxml="${build.resources}/web/WEB-INF/root-web.xml">
       <fileset dir="${build.resources}/web/html/root">
         <include name="**/*.html"/>
       </fileset>
     </war>

     <!-- build notjbosstest-web.war -->
     <mkdir dir="${build.lib}/wars"/>
     <war warfile="${build.lib}/wars/notjbosstest-web.war"
       webxml="${build.resources}/web/WEB-INF/notjbosstest-web.xml">
       <webinf dir="${build.resources}/web/html/other/WEB-INF">
         <include name="*"/>
       </webinf>
       <classes dir="${build.classes}">
         <include name="org/jboss/test/web/servlets/SecureServlet.class"/>
       </classes>
       <fileset dir="${build.resources}/web">
         <include name="*.properties"/>
       </fileset>
       <fileset dir="${build.resources}/web/html/other">
         <include name="**/*.html"/>
       </fileset>
     </war>

     <!-- build jbosstest-web.war -->
     <jar destfile="${build.lib}/resources.jar">
       <zipfileset dir="${build.resources}/web/html/jbosstest"
         prefix="org/jboss/resources" includes="JBoss.properties"/>
     </jar>
     <war warfile="${build.lib}/jbosstest-web.war"
       webxml="${build.resources}/web/WEB-INF/jbosstest-web.xml">
       <webinf dir="${build.resources}/web/html/jbosstest/WEB-INF">
         <include name="*"/>
       </webinf>
       <lib dir="${build.lib}">
         <include name="jbosstest-web-util.jar"/>
         <include name="resources.jar"/>
       </lib>
       <classes dir="${build.classes}">
         <!-- -->
         <include name="org/jboss/test/web/interfaces/ReturnData.class"/>
         <include name="org/jboss/test/web/servlets/**"/>
         <include name="org/jboss/test/web/util/ClassInClasses.class"/>
       </classes>
       <fileset dir="${build.resources}/web/html/jbosstest">
         <include name="**/*.jsp"/>
         <include name="**/*.html"/>
       </fileset>
     </war>

     <!-- Create a war with a bad web.xml descriptor to test redeployment
     of a failed war. The good-web.war is the same war with the web.xml
     descriptor fixed. Both use a context-root of /redeploy
     -->
     <war warfile="${build.lib}/bad-web.war"
       webxml="${build.resources}/web/WEB-INF/bad-web.xml">
       <webinf dir="${build.resources}/web/html/bad/WEB-INF">
         <include name="*"/>
       </webinf>
       <fileset dir="${build.resources}/web/html/bad">
         <include name="**/*.html"/>
       </fileset>
     </war>
     <war warfile="${build.lib}/good-web.war"
       webxml="${build.resources}/web/WEB-INF/good-web.xml">
       <webinf dir="${build.resources}/web/html/bad/WEB-INF">
         <include name="*"/>
       </webinf>
       <fileset dir="${build.resources}/web/html/bad">
         <include name="**/*.html"/>
       </fileset>
     </war>


     <!-- build jbosstest-web.ear -->
     <ear earfile="${build.lib}/jbosstest-web.ear"
       appxml="${build.resources}/web/META-INF/application.xml">
       <metainf dir="${build.resources}/web/META-INF">
         <include name="jboss-app.xml"/>
       </metainf>
       <fileset dir="${build.lib}">
         <include name="jbosstest-web-ejbs.jar"/>
         <include name="root-web.war"/>
         <include name="jbosstest-web.war"/>
         <include name="wars/notjbosstest-web.war"/>
         <include name="cts.jar"/>
         <include name="lib/util.jar"/>
         <include name="websubdir/relative.jar"/>
       </fileset>
       <fileset dir="${build.resources}/web">
         <include name="scripts/*"/>
       </fileset>
     </ear>

     <!-- Create an ear with the same war as the jbosstest-web.ear to test
     conflicts with unpackaging ear content
     -->
     <ear earfile="${build.lib}/jbosstest-web2.ear"
       appxml="${build.resources}/web/META-INF/application2.xml">
       <fileset dir="${build.lib}">
         <include name="wars/notjbosstest-web.war"/>
       </fileset>
     </ear>

     <ear earfile="${build.lib}/jbosstest-bad.ear"
       appxml="${build.resources}/web/META-INF/application-bad.xml">
       <fileset dir="${build.lib}">
         <include name="bad-web.war"/>
       </fileset>
     </ear>
     <ear earfile="${build.lib}/jbosstest-good.ear"
       appxml="${build.resources}/web/META-INF/application-good.xml">
       <fileset dir="${build.lib}">
         <include name="good-web.war"/>
       </fileset>
     </ear>
   </target>

  <!-- webservice tests -->
  <target name="_jars-webservice">
    <mkdir dir="${build.lib}"/>

    <!-- build ws4eesimple.jar -->
    <jar destfile="${build.lib}/ws4eesimple.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/ws4eesimple/Hello.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloBean.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloHome.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloWs.class"/>
      </fileset>
      <fileset dir="${source.resources}/webservice/ws4eesimple">
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/webservices.xml"/>
        <include name="META-INF/HelloMapping.xml"/>
        <include name="META-INF/wsdl/Hello.wsdl"/>
      </fileset>
    </jar>

    <!-- build ws4eesimple.war -->
    <war warfile="${build.lib}/ws4eesimple.war"
      webxml="${source.resources}/webservice/ws4eesimple/WEB-INF/web.xml">
      <classes dir="${build.classes}">
        <include name="org/jboss/test/webservice/ws4eesimple/HelloJavaBean.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloWs.class"/>
      </classes>
      <webinf dir="${source.resources}/webservice/ws4eesimple/META-INF">
        <include name="HelloMapping.xml"/>
        <include name="wsdl/Hello.wsdl"/>
      </webinf>
      <webinf dir="${source.resources}/webservice/ws4eesimple/WEB-INF">
        <include name="webservices.xml"/>
      </webinf>
    </war>

    <!-- build ws4eesimple-client.ear -->
    <jar destfile="${build.lib}/ws4eesimple-client.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/ws4eesimple/HelloWs.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloWsClientApp.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloHome.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/Hello.class"/>
      </fileset>
      <metainf dir="${source.resources}/webservice/ws4eesimple-client/META-INF">
        <include name="application-client.xml"/>
        <include name="jboss-client.xml"/>
        <include name="HelloMapping.xml"/>
        <include name="wsdl/HelloClient.wsdl"/>
      </metainf>
    </jar>
    <war warfile="${build.lib}/ws4eesimple-client.war"
      webxml="${source.resources}/webservice/ws4eesimple-client/WEB-INF/web.xml">
      <classes dir="${build.classes}">
        <include name="org/jboss/test/webservice/ws4eesimple/HelloWsClientServlet.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloWs.class"/>
      </classes>
      <webinf dir="${source.resources}/webservice/ws4eesimple-client/META-INF">
        <include name="HelloMapping.xml"/>
        <include name="wsdl/HelloClient.wsdl"/>
      </webinf>
    </war>
    <jar destfile="${build.lib}/ws4eesimple-client-ejb.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/ws4eesimple/HelloWs.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloClientBean.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/HelloHome.class"/>
        <include name="org/jboss/test/webservice/ws4eesimple/Hello.class"/>
      </fileset>
      <metainf dir="${source.resources}/webservice/ws4eesimple-client/META-INF">
        <include name="ejb-jar.xml"/>
        <include name="HelloMapping.xml"/>
        <include name="wsdl/HelloClient.wsdl"/>
      </metainf>
    </jar>
    <ear destfile="${build.lib}/ws4eesimple-client.ear" manifest="${build.etc}/manifest.mf"
      appxml="${source.resources}/webservice/ws4eesimple-client/META-INF/application.xml">
      <fileset dir="${build.lib}">
        <include name="ws4eesimple-client.jar"/>
        <include name="ws4eesimple-client.war"/>
        <include name="ws4eesimple-client-ejb.jar"/>
      </fileset>
    </ear>

    <!-- build ws4eemarshall-rpcenc.ear -->
    <jar destfile="${build.lib}/ws4eemarshall-rpcenc.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcBeanHome.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcBean.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcServiceInterface.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcBeanImpl.class"/>
        <include name="org/jboss/test/webservice/marshalltest/types/Bean.class"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/marshalltest-rpcenc/META-INF">
        <include name="webservices.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>
    <jar destfile="${build.lib}/ws4eemarshall-rpcenc-client.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcServiceInterface.class"/>
        <include name="org/jboss/test/webservice/marshalltest/types/Bean.class"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/marshalltest-rpcenc/META-INF">
        <include name="application-client.xml"/>
        <include name="jboss-client.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>
    <ear destfile="${build.lib}/ws4eemarshall-rpcenc.ear" manifest="${build.etc}/manifest.mf"
      appxml="${source.resources}/webservice/marshalltest-rpcenc/META-INF/application.xml">
      <fileset dir="${build.lib}">
        <include name="ws4eemarshall-rpcenc.jar"/>
        <include name="ws4eemarshall-rpcenc-client.jar"/>
      </fileset>
    </ear>

    <!-- build ws4eemarshall-rpclit.ear -->
    <jar destfile="${build.lib}/ws4eemarshall-rpclit.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcBeanHome.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcBean.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcServiceInterface.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcBeanImpl.class"/>
        <include name="org/jboss/test/webservice/marshalltest/types/Bean.class"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/marshalltest-rpclit/META-INF">
        <include name="webservices.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>
    <jar destfile="${build.lib}/ws4eemarshall-rpclit-client.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/marshalltest/MarshallRpcServiceInterface.class"/>
        <include name="org/jboss/test/webservice/marshalltest/types/Bean.class"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/marshalltest-rpclit/META-INF">
        <include name="application-client.xml"/>
        <include name="jboss-client.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>
    <ear destfile="${build.lib}/ws4eemarshall-rpclit.ear" manifest="${build.etc}/manifest.mf"
      appxml="${source.resources}/webservice/marshalltest-rpclit/META-INF/application.xml">
      <fileset dir="${build.lib}">
        <include name="ws4eemarshall-rpclit.jar"/>
        <include name="ws4eemarshall-rpclit-client.jar"/>
      </fileset>
    </ear>

    <!-- build ws4eemarshall-doclit.ear -->
    <jar destfile="${build.lib}/ws4eemarshall-doclit.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/marshalltest/MarshallDocBeanHome.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallDocBean.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallDocServiceInterface.class"/>
        <include name="org/jboss/test/webservice/marshalltest/MarshallDocBeanImpl.class"/>
        <include name="org/jboss/test/webservice/marshalltest/types/*"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/marshalltest-doclit/META-INF">
        <include name="webservices.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="ws4ee-deployment.xml"/>
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>
    <jar destfile="${build.lib}/ws4eemarshall-doclit-client.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/marshalltest/MarshallDocServiceInterface.class"/>
        <include name="org/jboss/test/webservice/marshalltest/types/*"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/marshalltest-doclit/META-INF">
        <include name="application-client.xml"/>
        <include name="jboss-client.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="ws4ee-deployment.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>
    <ear destfile="${build.lib}/ws4eemarshall-doclit.ear" manifest="${build.etc}/manifest.mf"
      appxml="${source.resources}/webservice/marshalltest-doclit/META-INF/application.xml">
      <fileset dir="${build.lib}">
        <include name="ws4eemarshall-doclit.jar"/>
        <include name="ws4eemarshall-doclit-client.jar"/>
      </fileset>
    </ear>

    <!-- build ws4eehandlerflow-ejb.jar -->
    <jar destfile="${build.lib}/ws4eehandlerflow.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/handlerflow/HelloHome.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HelloRemote.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HelloEndpoint.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HelloBean.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HandlerBase.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HandlerTracker.class"/>
        <include name="org/jboss/test/webservice/handlerflow/ClientHandler1.class"/>
        <include name="org/jboss/test/webservice/handlerflow/ClientHandler2.class"/>
        <!-- although the server handler are not needed, keep them for the test -->
        <include name="org/jboss/test/webservice/handlerflow/ServerHandler1.class"/>
        <include name="org/jboss/test/webservice/handlerflow/ServerHandler2.class"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/handlerflow/META-INF">
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
        <include name="HelloMapping.xml"/>
        <include name="wsdl/Hello.wsdl"/>
      </metainf>
    </jar>

    <!-- build ws4eehandlerflow.war -->
    <war warfile="${build.lib}/ws4eehandlerflow.war"
      webxml="${build.resources}/webservice/handlerflow/WEB-INF/web.xml">
      <classes dir="${build.classes}">
        <include name="org/jboss/test/webservice/handlerflow/HelloEndpoint.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HelloJSE.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HelloFeedbackServlet.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HandlerBase.class"/>
        <include name="org/jboss/test/webservice/handlerflow/HandlerTracker.class"/>
        <include name="org/jboss/test/webservice/handlerflow/ServerHandler1.class"/>
        <include name="org/jboss/test/webservice/handlerflow/ServerHandler2.class"/>
        <!-- although the client handler are not needed, keep them for the test -->
        <include name="org/jboss/test/webservice/handlerflow/ClientHandler1.class"/>
        <include name="org/jboss/test/webservice/handlerflow/ClientHandler2.class"/>
      </classes>
      <webinf dir="${build.resources}/webservice/handlerflow/META-INF">
        <include name="HelloMapping.xml"/>
        <include name="wsdl/Hello.wsdl"/>
      </webinf>
      <webinf dir="${build.resources}/webservice/handlerflow/WEB-INF">
        <include name="webservices.xml"/>
        <include name="jboss-web.xml"/>
      </webinf>
    </war>

    <!-- build ws4eeexception.jar -->
    <jar destfile="${build.lib}/ws4eeexception.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/exception/*.class"/>
        <exclude name="**/*TestCase.class"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/exception/META-INF">
        <include name="ejb-jar.xml"/>
        <include name="jboss.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="webservices.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>

    <!-- build ws4eeexception-client.jar -->
    <jar destfile="${build.lib}/ws4eeexception-client.jar" manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/webservice/exception/*Service.class"/>
        <include name="org/jboss/test/webservice/exception/*ServiceInterface.class"/>
      </fileset>
      <metainf dir="${build.resources}/webservice/exception/META-INF">
        <include name="application-client.xml"/>
        <include name="jboss-client.xml"/>
        <include name="jaxrpc-mapping.xml"/>
        <include name="wsdl/*.wsdl"/>
      </metainf>
    </jar>

  </target>

  <!-- xa test -->
  <target name="_jars-xa">
    <mkdir dir="${build.lib}"/>

    <!-- build xatestclient.jar -->
    <jar jarfile="${build.lib}/xatestclient.jar"
      manifest="${build.etc}/manifest.mf">
      <fileset dir="${build.classes}">
        <patternset refid="common.test.client.classes"/>
        <include name="org/jboss/test/xa/interfaces/**"/>
        <include name="org/jboss/test/xa/test/**"/>
      </fileset>
      <fileset dir="${build.resources}/xa">
        <include name="*.*"/>
      </fileset>
    </jar>

    <!-- build xatest.jar -->
    <jar jarfile="${build.lib}/xatest.jar">
      <fileset dir="${build.classes}">
        <patternset refid="jboss.test.util.ejb.set"/>
        <include name="org/jboss/test/xa/interfaces/**"/>
        <include name="org/jboss/test/xa/bean/**"/>
      </fileset>
      <fileset dir="${build.resources}/xa">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>


  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install"
    description="Install the structure for a release."
    depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip"
    description="Builds a ZIP distribution."
    depends="release, _buildmagic:release:zip"/>

  <target name="release-tar"
    description="Builds a TAR distribution."
    depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz"
    description="Builds a TAR-GZ distribution."
    depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
    description="Builds a distribution for each archive type."
    depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean"
    description="Cleans up most generated files."
    depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber"
    description="Cleans up all generated files."
    depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
    description="Executes the default target (most)."
    depends="most"/>

  <target name="all"
    description="Builds everything."
    depends="jars, docs"/>

  <target name="most"
    description="Builds almost everything."
    depends="jars"/>

  <target name="help"
    description="Show this help message."
    depends="_buildmagic:help:standard"/>

  <!-- ================================================================== -->
  <!-- Tests                                                              -->
  <!-- ================================================================== -->

  <!--
     | Run all tests.
   -->

  <target name="maybejars" depends="init"
    unless="nojars">
    <antcall target="jars" inheritRefs="true"/>
  </target>

  <target name="tests" description="Execute all tests."
    depends="tests-unit-noreport,
             tests-stress-noreport,
             tests-clustering-noreport,
             tests-report">
  </target>

  <target name="tests-unit" description="Execute all unit tests."
    depends="tests-unit-noreport, tests-report">
  </target>

  <target name="tests-unit-noreport"
    depends="init,
             tests-client-unit,
             tests-security-basic-unit,
             tests-standard-unit,
             tests-standalone-aop-unit,
             tests-jbossmx-compliance,
             tests-jbossmx-implementation,
             tests-jsr77-unit,
             tests-timer-unit,
             tests-txtimer-unit,
             tests-util-unit,
             tests-webservice-unit,
             tests-iiop-unit,
             tests-xml-unit">
  </target>

  <target name="tests-stress" description="Execute all stress tests."
    depends="tests-stress-noreport, tests-report">
  </target>

  <target name="tests-stress-noreport"
    depends="init,
             tests-standard-stress,
             tests-iiop-stress,
             tests-client-stress,
             tests-security-basic-stress,
             tests-jbossmx-performance">
  </target>

  <target name="tests-clustering" description="Execute clustering tests requiring two nodes."
    depends="init, tests-clustering-noreport, tests-report">
  </target>

  <target name="tests-clustering-noreport"
    depends="init, tests-clustering-unit,tests-http-clustering-unit">
  </target>

  	<!-- HTTP Clustering Tests-->
 <target name="tests-http-clustering-noreport"
  	    depends="init, tests-http-clustering-unit">
 </target>

 <target name="tests-http-clustering" description="Execute clustering tests requiring two nodes."
  	    depends="init, tests-http-clustering-noreport, tests-report-xml">
  </target>
	<!--Till Here-->

  <!--
     | Helper for running all jbossmx tests
   -->
  <target name="tests-jbossmx-all" description="Execute all jmx tests."
    depends="init,
             tests-jbossmx-compliance,
             tests-jbossmx-implementation,
             tests-jbossmx-performance,
             tests-report">
  </target>

  <target name="tests-marathon" description="Execute all marathon tests."
    depends="init,
             tests-standard-marathon">
  </target>

  <!--
     | Standard tests that should run successfully against a default JBoss
     | server distribution build.
   -->

  <target name="tests-standard-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <jvmarg value="-Djava.security.manager"/>
      <jvmarg value="-Djava.security.policy==${build.resources}/client.policy"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">

          <include name="**/*UnitTestCase.class"/>
          <!-- include the objectweb JMS tests -->
          <include name="org/objectweb/jtests/**/*Test.class"/>

          <!-- do not include the dyn loading or security tests -->
          <exclude name="**/test/jrmp/test/DynLoadingUnitTestCase.class"/>
          <exclude name="**/test/naming/test/Security*"/>
          <exclude name="**/test/security/test/*"/>
          <exclude name="**/test/securitymgr/test/*"/>

          <!-- Takes way too long, needs to be fixed to handle timeouts -->
          <!--
          <exclude name="**/test/jmsra/test/*"/>
          -->

          <!-- Exclude XAUnitTestCase until it can be updated -->
          <exclude name="**/test/xa/test/XAUnitTestCase.class"/>

          <!-- Exclude JSR77, it is run in its own target with a security manager -->
          <exclude name="**/test/management/test/**UnitTestCase.class"/>

          <!-- Exclude jboss.net, they run in their own target  -->
          <exclude name="**/test/jbossnet/**"/>

          <!-- Exclude iiop they run in their own target -->
          <exclude name="**/test/*iiop/test/*"/>
          <exclude name="org/jboss/test/media/**" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-standard-stress" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/*StressTestCase.class"/>

          <!-- do not include the perf, security, or iiop tests -->
          <!--mq test seems to break things-->
          <!--exclude name="**/JBossMQPerfStressTestCase.class"/-->
          <exclude name="**/test/naming/test/Security*"/>
          <exclude name="**/test/perf/test/SecurePerfStressTestCase.class"/>
          <exclude name="**/test/security/test/*"/>
          <exclude name="**/test/securitymgr/test/*"/>
          <exclude name="**/test/*iiop/test/*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-clustering-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
        	<!-- Remove the test.log so each run has a fresh log -->
        	    <delete file="${build.testlog}/test.log"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <!--jvmarg value="${junit.jvm.options}"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8789,server=y,suspend=y"/>
      <jvmarg value="-Djava.compiler=NONE"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xnoagent"/-->

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/testbeancluster/**/*UnitTestCase*.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Test HTTP Clustering -->
  <target name="tests-http-clustering-unit" depends="maybejars">
       <mkdir dir="${build.reports}"/>
       <mkdir dir="${build.testlog}"/>
       <echo>first round test</echo>
       <antcall target="tests-http-cluster"> </antcall>
       <echo>Bringing down the first instance</echo>
       <!-- <exec>shutdown.sh -s localhost:1199</exec> -->
  	<!--
        	<antcall target="shutdowninstance">
        	     <param name="instanceport" value="localhost:1099"/>
       	</antcall>
      	<echo>Sleeping for 30 seconds</echo>
  	    <sleep seconds="30" />
        	<echo>second round test</echo>
        	<antcall target="tests-http-cluster"> </antcall>
        	<echo>Bringing down the second instance</echo>
      	<antcall target="shutdowninstance">
      	       <param name="instanceport" value="localhost:1199"/>
      	</antcall>
      	<echo>Sleeping for 30 seconds</echo>
      	<sleep seconds="30" />
      	<echo>Third round test(Http Session Replication must fail)</echo>
      	<antcall target="tests-http-cluster"> </antcall>
      	-->
   </target>

  	<target name="shutdowninstance">
  	  <echo>Shutting Down an Instance of JBoss Running</echo>
      <java classname="org.jboss.Shutdown" fork="yes" >
  	  		<arg value="-s ${instanceport}"/>
  	  			<classpath>
  	  	           <pathelement location="/Users/anil/jboss-head/build/output/jboss-4.0.0DR4/bin/shutdown.jar"/>
  	  	           <pathelement location="/Users/anil/jboss-head/build/output/jboss-4.0.0DR4/client/jbossall-client.jar"/>
  	  	         </classpath>
  	  </java>
  	</target>


    	<target name="tests-http-cluster">
        	<echo>Calling tests-http-cluster</echo>
    		<junit dir="${module.output}"
    	        	      printsummary="${junit.printsummary}"
    	        	      haltonerror="${junit.haltonerror}"
    	        	      haltonfailure="${junit.haltonfailure}"
    	        	      fork="${junit.fork}"
    	        	      timeout="${junit.timeout}"
    	        	      jvm="${junit.jvm}">

    	        	      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
    	        	      <sysproperty key="build.testlog" value="${build.testlog}"/>
    	        	      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

    	        	      <classpath>
    	        	        <pathelement location="${build.classes}"/>
    	        	        <pathelement location="${build.resources}"/>
    	        	        <path refid="tests.classpath"/>
    	        	      </classpath>

    	        	      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

    	        	      <batchtest todir="${build.reports}"
    	        	        haltonerror="${junit.batchtest.haltonerror}"
    	        	        haltonfailure="${junit.batchtest.haltonfailure}"
    	        	        fork="${junit.batchtest.fork}">

    	        	        <fileset dir="${build.classes}">
    	        	        <!-- Following added by Anil -->
    	        	        <include name="org/jboss/test/cluster/**/*UnitTestCase*.class"/>
    	        	        </fileset>
    	        	      </batchtest>
    	        	</junit>
    	</target>


  <target name="tests-standalone-aop-unit" depends="maybejars">
    <!--
        <antcall target="tests-treecacheaop-unit" inheritRefs="true"/>
    -->
    <antcall target="tests-treecacheaopc-unit" inheritRefs="true"/>
    <antcall target="tests-baseaop-unit" inheritRefs="true"/>
  </target>

  <target name="tests-treecacheaop-unit" depends="init">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="-Djava.system.class.loader=org.jboss.aop.standalone.SystemClassLoader"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jboss.aop.path" file="${source.resources}/cache/standalone/META-INF/jboss-aop.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/cache/standalone"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/cache/test/standAloneAop/*AopTest.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-treecacheaopc-unit" depends="init">
    <!-- pre-compile the aop classes -->
    <taskdef name="aopc" classname="org.jboss.aop.ant.AopC" classpathref="jboss.aop.classpath"/>
    <path id="aop.task.classpath">
      <path refid="javassist.classpath"/>
      <path refid="trove.classpath"/>
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.common.classpath"/>
    </path>

    <aopc compilerclasspathref="aop.task.classpath">
      <classpath refid="thirdparty.classpath"/>
      <classpath path="${build.classes}"/>
      <src path="${build.classes}"/>
      <include name="org/jboss/test/cache/test/standAloneAop/**"/>
      <aoppath path="${source.resources}/cache/standalone/META-INF/jboss-aop.xml"/>
    </aopc>

    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jboss.aop.path" file="${source.resources}/cache/standalone/META-INF/jboss-aop.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/cache/standalone"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/cache/test/standAloneAop/*AopTest.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <target name="tests-baseaop-unit" depends="init">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <sysproperty key="java.system.class.loader" value="org.jboss.aop.standalone.SystemClassLoader"/>
      <sysproperty key="jboss.aop.path" file="${source.resources}/aop/META-INF/jboss-aop.xml"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/aop/nonjunit/StandaloneTest.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!--
     | Tests that need to be run by loading the testcase code from a client
     | jar rather than the build.classes.dir. Typically these tests need to
     | control how classes are loaded.
   -->

  <target name="tests-client-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="jbosstest.secure" value="true"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="java.rmi.server.RMIClassLoaderSpi" value="org.jboss.test.util.LoggingRMIClassLoader"/>

      <classpath>
        <pathelement path="${build.lib}/jrmp-dl-client.jar"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/jrmp/test/DynLoadingUnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-client-stress" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>
      <sysproperty key="jbosstest.secure" value="true"/>


      <classpath>
        <pathelement path="${build.lib}/jrmp-dl-client.jar"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <!--there aren't any of these - included for symmetry-->
          <exclude name="**/*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Standard security tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-security-basic-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="jbosstest.secure" value="true"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/naming/test/Security*"/>
          <include name="**/test/security/test/**UnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <target name="tests-security-basic-stress" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="jbosstest.secure" value="true"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>


      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/jmx/test/SecureJMXInvokerUnitTestCase.class"/>
          <include name="**/test/perf/test/SecurePerfStressTestCase.class"/>
          <include name="**/test/security/test/*StressTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Tests of Java2 permissions. The JBoss server must be running with
   a security manager for this test -->
  <target name="tests-security-manager" depends="init">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="true"
      haltonerror="false"
      haltonfailure="false"
      fork="true"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>

      <jvmarg value="-Djava.security.manager"/>
      <jvmarg value="-Djava.security.policy==${build.resources}/securitymgr/client.policy"/>
      <!--
            <jvmarg value="-Djava.security.debug=access,failure"/>
      -->
      <sysproperty key="jboss.home" file="${project.root}"/>
      <sysproperty key="jboss.thirdparty.dir" file="${project.root}/thirdparty"/>
      <sysproperty key="jboss.tools.dir" file="${project.root}/tools"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="jbosstest.secure" value="true"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.resources}"/>
        <pathelement location="${build.lib}/securitymgr-ejb.jar"/>
        <pathelement location="${build.lib}/securitymgr-tests.jar"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml"/>

      <batchtest todir="${build.reports}"
        haltonerror="false"
        haltonfailure="false"
        fork="true">

        <fileset dir="${build.classes}">
          <exclude name="org/jboss/test/securitymgr/test/PolicyUnitTestCase.class"/>
          <include name="org/jboss/test/securitymgr/test/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-security-policy" depends="init">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <!-- The standalone test runs against the securitymgr-*.jars -->
    <junit dir="${module.output}"
      printsummary="true"
      haltonerror="false"
      haltonfailure="false"
      fork="true"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>

      <jvmarg value="-Djava.security.manager"/>
      <jvmarg value="-Djava.security.policy==${build.resources}/securitymgr/client.policy"/>
      <!--
            <jvmarg value="-Djava.security.debug=access,domain,stack"/>
      -->
      <sysproperty key="jboss.home" file="${project.root}"/>
      <sysproperty key="jboss.thirdparty.dir" file="${project.root}/thirdparty"/>
      <sysproperty key="jboss.tools.dir" file="${project.root}/tools"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.resources}"/>
        <pathelement location="${build.lib}/securitymgr-ejb.jar"/>
        <pathelement location="${build.lib}/securitymgr-tests.jar"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml"/>
      <test name="org.jboss.test.securitymgr.test.PolicyUnitTestCase"
        haltonerror="false"
        haltonfailure="false"
        fork="true"/>
    </junit>
  </target>

  <!--
     | Standard JSR-77 tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-jsr77-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="jbosstest.secure" value="true"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/management/test/**UnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Standard jbossnet tests that should run successfully against a
     | JBoss server distribution build that contains jboss-net.
   -->

  <target name="tests-jbossnet-unit" depends="maybejars">

    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <!-- choose a testpattern via a property -->
    <property name="jbosstest.pattern" value="**/*"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="jbosstest.secure" value="true"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy" value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config" value="${build.resources}/security/auth.conf"/>

      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <!-- make sure to use xerces on the client side as well, otherwise the element echo tests might fail -->
      <sysproperty key="javax.xml.parsers.DocumentBuilderFactory" value="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
      <sysproperty key="javax.xml.parsers.SAXParserFactory" value="org.apache.xerces.jaxp.SAXParserFactoryImpl"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <pathelement location="${jboss.jbossnet.lib}/jboss-net-client.jar"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>
      <formatter type="plain" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/jbossnet/${jbosstest.pattern}TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | J2EE webservice tests that should run successfully against a
     | JBoss server distribution build that contains jboss-webservice.sar
   -->

  <target name="tests-webservice-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>

    <!-- choose a testpattern via a property -->
    <property name="jbosstest.pattern" value="**/*"/>

    <property environment="env"/>
    <property name="jboss.home" value="${env.JBOSS_HOME}"/>

    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="jbosstest.secure" value="true"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy" value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config" value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <!-- The crimson parser cannot do schema validation, which we need for jaxrpc-mapping.xml -->
      <sysproperty key="java.endorsed.dirs" value="${jboss.home}/lib/endorsed"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>
      <formatter type="plain" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/webservice/**/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Standard marathon tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-standard-marathon" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${marathon.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.duration" value="${marathon.duration}"/>
      <sysproperty key="jbosstest.threadcount" value="${marathon.threadcount}"/>
      <sysproperty key="jbosstest.server.name" value="${jbosstest.server.name}"/>
      <sysproperty key="jbosstest.deploy.dir" value="${jbosstest.deploy.dir}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <!--        <pathelement location="${build.resources}/marathon"/> -->
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/marathon/test/**MarathonTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Standard Foe-Deployer tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-foe-deployer-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/foedeployer/test/**TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Standard EJB Timer tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-timer-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/timer/test/**TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Standard EJB Timer tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-txtimer-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/txtimer/test/**TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Standard JBoss Util tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-util-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/util/test/**UnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | JBossMX implementation tests that should run correctly.
   -->

  <target name="tests-jbossmx-implementation" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>

      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/jbossmx/implementation/**/*TestCase.class"/>
          <!-- Ignore the abstract class -->
          <exclude name="org/jboss/test/jbossmx/implementation/TestCase.class"/>
          <exclude name="org/jboss/test/jmx/test/SecureJMXInvokerUnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | JBossMX performance tests that should run correctly.
   -->

  <target name="tests-jbossmx-performance" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>

      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/jbossmx/performance/**/*TestCase.class"/>
          <!-- Ignore the abstract class -->
          <exclude name="org/jboss/test/jbossmx/performance/TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | JBossMX compliance tests that should run correctly.
   -->

  <target name="tests-jbossmx-compliance" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>

      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/jbossmx/compliance/**/*TestCase.class"/>
          <!-- Ignore the abstract class -->
          <exclude name="org/jboss/test/jbossmx/compliance/TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | IIOP test cases that should run successfully
   -->
  <target name="tests-iiop-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB"/>
      <jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton"/>
      <jvmarg value="-Djacorb.orb.print_version=off"/>
      <jvmarg value="-Djacorb.log.default.verbosity=0"/>
      <jvmarg value="-Djacorb.interop.strict_check_on_tc_creation=off"/>
      <jvmarg value="-Djacorb.log.loggerFactory=org.jboss.util.Log4jLoggerFactory"/>
      <jvmarg value="-Djacorb.security.ssl.client.supported_options=0"/>
      <jvmarg value="-Djacorb.security.ssl.client.required_options=0"/>
      <jvmarg value="-DORBInitRef.NameService=corbaloc::localhost:3528/JBoss/Naming/root"/>
      <jvmarg value="-Dorg.omg.PortableInterceptor.ORBInitializerClass.org.jboss.tm.iiop.TxClientInterceptorInitializer"/>
      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
        <path refid="jboss.iiop.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/*iiop/test/*UnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-iiop-stress" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB"/>
      <jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton"/>
      <jvmarg value="-Djacorb.orb.print_version=off"/>
      <jvmarg value="-Djacorb.log.default.verbosity=0"/>
      <jvmarg value="-Djacorb.interop.strict_check_on_tc_creation=off"/>
      <jvmarg value="-Djacorb.log.loggerFactory=org.jboss.util.Log4jLoggerFactory"/>
      <jvmarg value="-Djacorb.security.ssl.client.supported_options=0"/>
      <jvmarg value="-Djacorb.security.ssl.client.required_options=0"/>
      <jvmarg value="-DORBInitRef.NameService=corbaloc::localhost:3528/JBoss/Naming/root"/>
      <jvmarg value="-Dorg.omg.PortableInterceptor.ORBInitializerClass.org.jboss.tm.iiop.TxClientInterceptorInitializer"/>
      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
        value="${build.resources}/security/tst.policy"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
        <path refid="jboss.iiop.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/*iiop/test/*StressTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Test the XML binding framework
   -->

  <target name="tests-xml-unit" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
        <path refid="apache.xerces.classpath"/>
        <path refid="apache.jaxme.classpath"/>
        <path refid="wutka.dtdparser.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/xml/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Run all database related tests
   -->

  <target name="tests-db" depends="init, run-db-tests, tests-report-html"/>

  <target name="run-db-tests" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.iterationcount" value="2"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/bank/**/*StressTestCase.class"/>
          <include name="**/bmp/**/*UnitTestCase.class"/>
          <include name="**/cmp2/**/*UnitTestCase.class"/>
          <include name="**/cmp2/**/*StressTestCase.class"/>
          <include name="**/dbtest/**/*UnitTestCase.class"/>
          <include name="**/deadlock/**/*StressTestCase.class"/>
          <include name="**/entityexc/**/*UnitTestCase.class"/>
          <include name="**/idgen/**/*UnitTestCase.class"/>
          <include name="**/perf/**/*UnitTestCase.class"/>
          <include name="**/testbean/**/*UnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>



  <!--
     | Run testcases in a single directory by specifing the test directory
     | name in -Dtest=dirname in tests/dirname/test/**TestCase.class
   -->

  <target name="test" depends="init" if="test"
    description="Execute all tests in the given test directory.">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <!-- Remove the test.log so each run has a fresh log -->
    <delete file="${build.testlog}/test.log"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <jvmarg value="-Djava.security.manager"/>
      <jvmarg value="-Djava.security.policy==${build.resources}/client.policy"/>
      <sysproperty key="jbosstest.deploy.dir" value="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>


      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <!-- Include for those tests that need common security resources -->
        <pathelement location="${build.resources}/security"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="plain" usefile="${junit.formatter.usefile}"/>
      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/${test}/**/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Run iiop testcases in a single directory by specifing the test
     | directory name in -Dtest=dirname in tests/dirname/test/**TestCase.class
   -->

  <target name="iiop-test" depends="maybejars" if="test"
    description="Execute a single test.">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <!-- Remove the test.log so each run has a fresh log -->
    <delete file="${build.testlog}/test.log"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>

      <jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB"/>
      <jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton"/>
      <jvmarg value="-Djacorb.orb.print_version=off"/>
      <jvmarg value="-Djacorb.log.default.verbosity=0"/>
      <jvmarg value="-Djacorb.interop.strict_check_on_tc_creation=off"/>
      <jvmarg value="-Djacorb.log.loggerFactory=org.jboss.util.Log4jLoggerFactory"/>
      <jvmarg value="-Djacorb.security.ssl.client.supported_options=0"/>
      <jvmarg value="-Djacorb.security.ssl.client.required_options=0"/>
      <jvmarg value="-DORBInitRef.NameService=corbaloc::localhost:3528/JBoss/Naming/root"/>
      <jvmarg value="-Dorg.omg.PortableInterceptor.ORBInitializerClass.org.jboss.tm.iiop.TxClientInterceptorInitializer"/>
      <jvmarg value="-Djava.security.manager"/>
      <jvmarg value="-Djava.security.policy==${build.resources}/${test}/client.policy"/>

      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
        <path refid="jboss.iiop.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/${test}/**/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Run the JORAM JMS testsuite against JBossMQ
   -->
  <target name="tests-objectweb-jms" depends="maybejars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/objectweb/jtests/**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Run a single testcase by specifing the fully qualified class name
     | of the unit test using the test property, -Dtest=org.jboss.test....
     | Here you specify the testcase class, not the directory
   -->

  <target name="one-test" depends="init" if="test"
    description="Execute a single test.">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <!-- Remove the test.log so each test has a fresh log -->
    <delete file="${build.testlog}/test.log"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <!--jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=n,address=5005,suspend=y"/-->
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>
      <sysproperty key="jbosstest.nodeploy" value="${jbosstest.nodeploy}"/>
      <sysproperty key="jbosstest.secure" value="true"/>
      <sysproperty key="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <sysproperty key="javax.net.ssl.trustStore"
        value="${build.resources}/security/tst.keystore"/>
      <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true" />

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <!-- Include for those tests that need common security resources -->
        <pathelement location="${build.resources}/security"/>
        <path refid="tests.classpath"/>
      </classpath>

      <formatter type="xml" usefile="${junit.formatter.usefile}"/>

      <test todir="${build.reports}" name="${test}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}"/>
    </junit>
  </target>


  <!--
     | Generates reports from JUnit output.
   -->

  <target name="reports" depends="tests-report"
    description="Generates all reports."/>

  <target name="tests-report-clean" depends="init">
    <delete dir="${build.reports}"/>
  </target>

  <target name="tests-report" depends="tests-report-html, tests-report-text, tests-report-xml">
    <tar tarfile="${module.output}/${TIMENOW}.tgz" compression="gzip" longfile="gnu">
      <tarfileset dir="${build.reports}/html" prefix="${TIMENOW}">
        <include name="**"/>
      </tarfileset>
    </tar>
  </target>

  <target name="tests-report-html" depends="compile-stylesheets">
    <mkdir dir="${build.reports}/html"/>

    <junitreport todir="${build.reports}">
      <fileset dir="${build.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames"
        todir="${build.reports}/html"
        styledir="${build.stylesheets}"
        />
    </junitreport>
  </target>

  <!--
     | this currently spews logs of VariableReference crap, so it is turned
     | off by default.  Once this is fixed, it should be built after
     | tests-report-html
   -->

  <target name="tests-report-text" depends="tests-report-html">
    <mkdir dir="${build.reports}/text"/>

    <style basedir="${build.reports}"
      destdir="${build.reports}/text"
      extension=".txt"
      style="${build.stylesheets}/summary1b.xsl"
      includes="TESTS-TestSuites.xml">
      <param name="thedate" expression="${TIMENOW}"/>
      <param name="java_version" expression="${java.version}"/>
      <param name="java_vendor" expression="${java.vendor}"/>
      <param name="java_vm_specification_version" expression="${java.vm.specification.version}"/>
      <param name="java_vm_version" expression="${java.vm.version}"/>
      <param name="java_vm_name" expression="${java.vm.name}"/>
      <param name="java_vm_info" expression="${java.vm.info}"/>
      <param name="java_specification_version" expression="${java.specification.version}"/>
      <param name="java_class_version" expression="${java.class.version}"/>
      <param name="os_name" expression="${os.name}"/>
      <param name="os_arch" expression="${os.arch}"/>
      <param name="os_version" expression="${os.version}"/>
      <param name="builduid" expression="${TIMENOW}"/>
      <param name="results_web" expression="${results_web}"/>
    </style>
  </target>

  <target name="tests-report-xml" depends="tests-report-html">
    <mkdir dir="${build.reports}/xml"/>

    <style basedir="${build.reports}"
      destdir="${build.reports}/xml"
      extension=".xml"
      style="${build.stylesheets}/shortXmlSummary.xsl"
      includes="TESTS-TestSuites.xml">
      <param name="thedate" expression="${TIMENOW}"/>
      <param name="java_version" expression="${java.version}"/>
      <param name="java_vendor" expression="${java.vendor}"/>
      <param name="java_vm_specification_version"

        expression="${java.vm.specification.version}"/>
      <param name="java_vm_version" expression="${java.vm.version}"/>
      <param name="java_vm_name" expression="${java.vm.name}"/>
      <param name="java_vm_info" expression="${java.vm.info}"/>
      <param name="java_specification_version" expression="${java.specification.version}"/>
      <param name="java_class_version" expression="${java.class.version}"/>
      <param name="os_name" expression="${os.name}"/>
      <param name="os_arch" expression="${os.arch}"/>
      <param name="os_version" expression="${os.version}"/>
    </style>
  </target>

  <target name="test-path">
      <property environment="env"/>
      <property name="win32.drive" value="${env.SYSTEMDRIVE}" />
      <echo message="win32.drive=${win32.drive}" />
      <pathconvert targetos="unix" property="codebaseURL">
         <map from="${win32.drive}" to=""/>
         <path path="output/lib"/>
      </pathconvert>
      <echo message="+++ codebase=${codebaseURL}"/>
      <echo message="+++ build.lib=${build.lib}"/>
      <copy todir="output/lib" filtering="true" overwrite="true"
         file="output/resources/jmx/archivestest-service.xml">
         <filterset>
            <filter token="codebase" value="file://${codebaseURL}"/>
         </filterset>
      </copy>
  </target>

</project>
